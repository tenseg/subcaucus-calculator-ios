{"version":3,"sources":["Utilities.ts","Subcaucus.ts","SubCalcPRNG.ts","Snapshot.ts","SubCalc.ts","Loader.tsx","ValueCard.tsx","SubcaucusRowInfoCard.tsx","SubcaucusRow.tsx","App.tsx","ShowJSON.tsx","registerServiceWorker.ts","index.tsx"],"names":["alertFunction","debug","message","isDebugging","_console","_len","arguments","length","optionalParams","Array","_key","console","log","apply","concat","alertUser","error","alert","_len2","_key2","getQueryVariable","variable","vars","window","location","search","substring","split","i","pair","decodeURIComponent","unwrapString","maybeString","empty","undefined","randomSeed","Math","floor","random","String","prototype","trim","str","this","replace","test","charAt","hashCode","hash","charCodeAt","toDate","Date","Number","toCommaString","toString","singularPlural","singular","plural","includeNumber","number","comparisonValue","decimalPlaces","multiple","pow","round","pushUnique","something","indexOf","push","max","reduce","accumulator","current","toTimestampString","toJSON","_tg_counter","now","Subcaucus","init","_this","Object","classCallCheck","name","count","id","delegates","recreate","with","fromJSON","json","decoded","decoder","run","ok","result","_u","defaultName","displayName","viability","baseDelegates","remainder","_tosses","reportTosses","clearDelegateInfo","setViability","delegateScore","coinToss","won","against","tosses","forEach","toss","keys","map","key","addRemainderDelegate","asText","text","object","string","optional","SubCalcPRNG","state1","state2","mod1","mul1","mod2","mul2","record","randomUpTo","limit","abs","randomComparison","recordSummary","summary","r","isNaN","Snapshot","debugID","revision","allowed","subcaucuses","s","join","created","device","revised","seed","changes","TSMap","subcaucus","set","jsub","keyNum","revise","update","redistributeDelegates","room","totalDelegates","wholeViability","viableRoom","delegateViability","subs","values","acc","sub","ceil","vSubs","filter","scRand","vSubRanks","m","temp","sort","a","b","coinFlip","reportingTo","justAddedRemainderDelegate","meetingKey","snapshotKey","nextSubcaucusID","toConsumableArray","addSubcaucus","newID","deleteSubcaucus","delete","sText","parse","toLocaleString","dict","SubCalc","snapshot","version","storedSnapshotPrefix","trashedSnapshotPrefix","storedSnapshotKey","snapshots","status","localStorage","prefix","storedKey","startsWith","readSnapshot","setSnapshot","write","newSnapshot","duplicateSnapshot","jsonSubCalc","v","jsonSubCalcString","JSON","stringify","setItem","e","Error","writeSnapshot","jsnap","jsnapString","reviseSnapshot","saveSnapshot","renameMeeting","deleteSnapshot","removeItem","read","getItem","SortOrder","ValueCard","_React$Component","props","possibleConstructorReturn","getPrototypeOf","call","isPositiveInteger","originalValue","value","defaultValue","handleChange","event","currentTarget","num","setState","handleKey","onSave","state","focusOnWholeText","target","setTimeout","setSelectionRange","isEmpty","save","allowEmpty","idPlus","suffix","type","initialValue","inherits","createClass","cardFooter","react","footer","illegallyEmpty","originalIllegallyEmpty","saveButton","primereact_button","label","icon","disabled","onClick","cancelButton","className","extraButtons","card","title","header","image","alt","src","children","description","inputtext","autoComplete","keyfilter","pattern","placeholder","onChange","onKeyUp","autoFocus","React","SubcaucusRowInfoCard","_this$props","dismiss","ValueCard_ValueCard","SubcaucusRow","handleName","slice","exchange","index","handleCount","handleCountBlur","rows","currentTabIndex","tabIndex","next","document","querySelectorAll","element","focus","showInfo","_this2","_this$state","infoCard","SubcaucusRowInfoCard_SubcaucusRowInfoCard","inputtextarea","cols","onKeyDown","onBlur","CardFor","Presenting","Loader","renderMenu","items","command","onLoad","menubar","model","sortOrderIcon","button","sortBy","toggleSortOrder","subcalc","forceUpdate","renderSnapshot","createdDate","year","month","day","revisedString","hour","minute","second","renderSnapshots","sortBySnapshotRevision","comparison","revA","revB","sortBySnapshotName","toUpperCase","renderMeeting","snap","snapshotsJSX","accordion","headerClassName","contentClassName","renderMeetings","currentMeetingKey","tabs","meetingIndex","indexOfCurrent","meetingSnapshots","activeIndex","iconPos","onNew","ShowJSON","jsonString","data","App","callback","keySuffix","initialCardState","WelcomeAndSetName","ChangingDelegates","growl","loadSnapshot","present","Calculator","setStateName","setStateAllowed","setStateSeed","setStateSubcaucuses","newMeeting","cards","duplicateMeeting","growlAlert","toLocaleDateString","allowedString","addCard","cardFor","to","addCardState","removeCard","seekingCardFor","from","foundCardFor","removeCardState","switchCardState","fromCardFor","toCardFor","newCards","showingCard","handleSubcaucusChange","action","removeEmpties","subset","k","RemovingEmpties","order","nextSortOrder","currentOrder","nextOrder","ShowingAbout","ShowingInstructions","ShowingSecurity","afterBefore","SavingSnapshotBefore","Loading","SavingSnapshot","ChangingCoin","renderAbout","ShowingBy","href","renderInstructions","renderSecurity","renderBy","renderWelcomeAndSetName","renderChangingName","ChangingName","renderSavingSnapshot","renderSavingSnapshotBefore","nextStepLoading","renderChangingDelegates","renderChangingCoin","renderRemovingEmpties","renderNextCard","sortBySubcaucusName","nameA","nameB","sortName","sortBySubcaucusCounts","sortCount","Infinity","renderSubcaucusRows","None","array","SubcaucusRow_SubcaucusRow","renderSummary","renderCalculator","Ascending","renderByline","renderDebuggingInfo","toLocaleTimeString","ShowJSON_ShowJSON","style","clear","severity","show","closable","detail","Loader_Loader","ref","el","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","ReactDOM","App_App","getElementById","URL","process","origin","addEventListener","fetch","response","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.e911c17d.chunk.js","sourcesContent":["// Utilities.tsx\n//\n// A number of helpful functions used throughout the app.\n//\n// Recommend this file be imported as:\n// import * as _u from './Utilities'\n//\n// We use the name \"_u\" so that tslint won't complain if we\n// do not actually use any _u functions in our file. This way\n// we still can import the prototype extensions.\n\n// Prototype extensions\n\ndeclare global {\n\n\ttype TimestampString = string\n\ttype ComparisonValue = -1 | 0 | 1\n\n\t// about extending classes\n\t// see: https://stackoverflow.com/a/53392268/383737\n\n\tinterface String {\n\t\ttrim(): string\n\t\thashCode(): number\n\t\ttoDate(): Date\n\t}\n\n\tinterface Number {\n\t\ttoCommaString(): string\n\t\tsingularPlural(singular: string, plural: string): string\n\t\tcomparisonValue(): ComparisonValue\n\t\tdecimalPlaces(decimalPlaces: number): number\n\t}\n\n\tinterface Array<T> {\n\t\tpushUnique(something: T): Array<T>\n\t\tmax(): number\n\t}\n\n\t/**\n\t * Converts a date to our typical timestamp string,\n\t * which is really just JSON format with a type to be clearer.\n\t */\n\tinterface Date {\n\t\ttoTimestampString(): TimestampString\n\t}\n\n}\n\n// see http://blog.stevenlevithan.com/archives/faster-trim-javascript\nString.prototype.trim = function (): string {\n\tvar str = this.replace(/^\\s+/, '')\n\tfor (var i = str.length - 1; i >= 0; i--) {\n\t\tif (/\\S/.test(str.charAt(i))) {\n\t\t\tstr = str.substring(0, i + 1)\n\t\t\tbreak\n\t\t}\n\t}\n\treturn str\n}\n\n// https://stackoverflow.com/a/7616484\nString.prototype.hashCode = function (): number {\n\tlet hash = 0\n\tif (this.length === 0) return hash;\n\tfor (let i = 0; i < this.length; i++) {\n\t\tlet chr = this.charCodeAt(i);\n\t\thash = ((hash << 5) - hash) + chr;\n\t\thash |= 0; // Convert to 32bit integer\n\t}\n\treturn hash;\n}\n\nString.prototype.toDate = function (): Date {\n\treturn new Date(String(this))\n}\n\n// see: https://stackoverflow.com/a/2901298\nNumber.prototype.toCommaString = function (): string {\n\treturn this.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}\n\nNumber.prototype.singularPlural = function (singular: string, plural: string, includeNumber?: 'no number'): string {\n\tconst number = includeNumber != 'no number' ? `${this} ` : ''\n\treturn `${number}${this == 1 ? singular : plural}`\n}\n\nNumber.prototype.comparisonValue = function (): ComparisonValue {\n\tif (this < 0) return -1\n\tif (this > 0) return 1\n\treturn 0\n}\n\nNumber.prototype.decimalPlaces = function (decimalPlaces: number) {\n\tconst multiple = Math.pow(10, decimalPlaces)\n\treturn Math.round(Number(this) * multiple) / multiple\n}\n\n// see: https://stackoverflow.com/a/12803141\nArray.prototype.pushUnique = function (something) {\n\tif (this.indexOf(something) === -1) {\n\t\tthis.push(something)\n\t}\n\treturn this\n}\n\nArray.prototype.max = function (): number {\n\treturn this.reduce((accumulator, current) => {\n\t\treturn Math.max(accumulator, current)\n\t})\n}\n\n/**\n * Converts a date to our typical timestamp string,\n * which is really just JSON format with a type to be clearer.\n */\nDate.prototype.toTimestampString = function (): TimestampString {\n\treturn this.toJSON()\n}\n\n// _u functions\n\n/**\n * _u.debug\n * \n * Pass along message and optionalParams to console.log\n * only if we are in a development environment.\n * \n */\nexport function debug(message?: any, ...optionalParams: any[]) {\n\tif (isDebugging()) {\n\t\tconsole.log(message, ...optionalParams)\n\t}\n}\n\nvar alertFunction: ((message: string) => void)\n\nexport function setAlertFunction(callback: ((message: string) => void)) {\n\talertFunction = callback\n}\n\nexport function alertUser(error: Error, ...optionalParams: any[]) {\n\tif (alertFunction) {\n\t\talertFunction(error.message)\n\t} else {\n\t\talert(error.message)\n\t}\n\tdebug(error, ...optionalParams)\n}\n\nexport function isDebugging(): boolean {\n\treturn !process.env.NODE_ENV || process.env.NODE_ENV === \"development\" || getQueryVariable(\"debug\") === \"yes\"\n}\n\nexport function isApp(): boolean {\n\treturn getQueryVariable(\"app\") === \"yes\"\n}\n\nexport function getQueryVariable(variable: string) {\n\tvar query = window.location.search.substring(1);\n\tvar vars = query.split('&');\n\tfor (var i = 0; i < vars.length; i++) {\n\t\tvar pair = vars[i].split('=');\n\t\tif (decodeURIComponent(pair[0]) == variable) {\n\t\t\treturn decodeURIComponent(pair[1]);\n\t\t}\n\t}\n\treturn undefined\n}\n\n/**\n * Unwrap the optional string, returning '' if it was undefined.\n * \n * @param {string | undefined} maybeString\n * @param {string} empty An alternative string to return if the input was undefined.\n */\nexport function unwrapString(maybeString?: string, empty = ''): string {\n\tif (maybeString == undefined) return empty\n\treturn maybeString\n}\n\n/**\n * Unwrap the optional number, returning 0 if it was undefined.\n * \n * @param {string | undefined} maybeNumber\n * @param {string} empty An alternative number to return if the input was undefined.\n */\nexport function unwrapNumber(maybeNumber?: number, empty = 0): number {\n\tif (maybeNumber == undefined) return empty\n\treturn maybeNumber\n}\n\n/**\n * Unwrap the optional boolean, returning false if it was undefined.\n * \n * @param {string | undefined} maybeBoolean\n * @param {string} empty An alternative boolean value to return if the input was undefined.\n */\nexport function unwrapBoolean(maybeBoolean?: boolean, empty = false): boolean {\n\tif (maybeBoolean == undefined) return empty\n\treturn maybeBoolean\n}\n\n/**\n * A random number provided by Math.random() to use as a seed\n * for our own random number sequences.\n * \n * Note that in SubCalc1 we used seconds from Unix epoch as seeds,\n * but that makes it somewhat confusing by implying a connection between\n * the time and the seed. There really is no such connection.\n */\nexport function randomSeed(): number {\n\treturn Math.floor(Math.random() * 1000000)\n}\n\n/**\n * Provides a uniqueNumber, simply counting up each time a number is provided.\n */\nlet _tg_counter = 0\nexport function uniqueNumber(): number {\n\treturn _tg_counter++\n}\n\n/**\n * Returns the TimestampString of the current time.\n */\nexport function now(): TimestampString {\n\treturn (new Date()).toTimestampString()\n}","// we will need a way to type validate the json we import\n// see https://github.com/mojotech/json-type-validation\n// or maybe just use a JSON.parse reviver to type the data\n\n// see: https://github.com/mojotech/json-type-validation\nimport { Decoder, object, string, optional, number, boolean } from '@mojotech/json-type-validation'\n\n// local to this app\nimport * as _u from './Utilities'\n\ndeclare global {\n\n\tinterface SubcaucusInitializer {\n\t\tid: number\n\t\twith?: Partial<SubcaucusJSON>\n\t\tjson?: SubcaucusJSON\n\t}\n\n\tinterface SubcaucusJSON {\n\t\tname: string\n\t\tcount: number\n\t\tdelegates?: number\n\t}\n\n}\n\nexport class Subcaucus {\n\n\tdebug = (): string => {\n\t\treturn `${this.name} (${this.count})`\n\t}\n\treadonly id: number\n\tname: string\n\tcount: number\n\tdelegates: number\n\n\tstatic decoder: Decoder<SubcaucusJSON> = object({\n\t\tname: string(),\n\t\tcount: number(),\n\t\tdelegates: optional(number())\n\t})\n\n\t/**\n\t * Creates a new subcacucus instance.\n\t * \n\t * ```typescript\n\t * interface SubcaucusInitializer {\n\t *   id: number\n\t *   with?: {\n\t *     name?: string\n\t *     count?: number\n\t * \t   delegates?: number\n\t *   }\n\t *   json?: SubcaucusJSON\n\t * }\n\t * ```\n\t * @param {SubcaucusInitializer} init\n\t */\n\tconstructor(init: SubcaucusInitializer) {\n\t\tthis.id = init.id\n\n\t\tthis.name = ''\n\t\tthis.count = 0\n\t\tthis.delegates = 0\n\n\t\tif (init.with) {\n\t\t\tthis.name = init.with[\"name\"] || this.name\n\t\t\tthis.count = init.with[\"count\"] || this.count\n\t\t\tthis.delegates = init.with[\"delegates\"] || this.delegates\n\t\t}\n\n\t\tif (init.json) {\n\t\t\tthis.fromJSON(init.json)\n\t\t}\n\t}\n\n\trecreate = (): Subcaucus => {\n\t\treturn new Subcaucus({\n\t\t\tid: this.id,\n\t\t\twith: {\n\t\t\t\tname: this.name,\n\t\t\t\tcount: this.count,\n\t\t\t\tdelegates: this.delegates,\n\t\t\t}\n\t\t})\n\t}\n\n\ttoJSON = (): SubcaucusJSON => {\n\t\treturn {\n\t\t\tname: this.name,\n\t\t\tcount: this.count\n\t\t}\n\t}\n\n\tfromJSON = (json: SubcaucusJSON) => {\n\t\tconst decoded = Subcaucus.decoder.run(json)\n\n\t\tif (decoded.ok) {\n\t\t\tthis.name = decoded.result.name\n\t\t\tthis.count = decoded.result.count\n\t\t\tthis.delegates = decoded.result.delegates || 0\n\t\t} else {\n\t\t\t_u.debug(decoded.error)\n\t\t}\n\t}\n\n\tdefaultName = () => {\n\t\treturn `Subcaucus ${this.id}`\n\t}\n\n\tdisplayName = () => {\n\t\treturn this.name || this.defaultName()\n\t}\n\n\t/**\n\t * The viability number provided by the snapshot.\n\t * This is the `delegateViability` number.\n\t */\n\tviability = 0\n\n\t/**\n\t * The number of delegates based on the simple viability number,\n\t * before any remainders have been considered.\n\t */\n\tbaseDelegates = 0\n\n\t/**\n\t * The remainder left after apportioning base delegates.\n\t */\n\tremainder = 0\n\n\t/**\n\t * Reported coin toss results.\n\t */\n\tprivate _tosses: Array<{ won: boolean, against: Subcaucus }> = []\n\n\t/**\n\t * This will flag subcaucuses which should report out\n\t * the details of their coin tosses.\n\t */\n\treportTosses = false\n\n\t/**\n\t * Clear all delegate calculation-related variables\n\t * in preparation for a recalculation.\n\t */\n\tclearDelegateInfo = () => {\n\t\tthis.delegates = 0\n\t\tthis.viability = 0\n\t\tthis.baseDelegates = 0\n\t\tthis.remainder = 0\n\t\tthis.reportTosses = false\n\t\tthis._tosses = []\n\t}\n\n\t/**\n\t * Set the internal viability number and calculate base delegates\n\t * and remainder values.\n\t */\n\tsetViability = (viability: number) => {\n\t\tthis.viability = viability\n\t\tconst delegateScore = this.count / this.viability\n\t\tthis.baseDelegates = Math.floor(delegateScore)\n\t\tthis.delegates = this.baseDelegates\n\t\tthis.remainder = delegateScore - this.baseDelegates\n\t}\n\n\t/**\n\t * Report coin tosses to the subcaucus.\n\t */\n\tcoinToss = (won: boolean, against: Subcaucus) => {\n\t\tthis._tosses.push({ won: won, against: against })\n\t}\n\n\t/**\n\t * An array of the last toss exchanged with each opponent subcaucus.\n\t */\n\ttosses = (): Array<{ won: boolean, against: Subcaucus }> => {\n\t\t// return an empty array if we are not to be reporting any tosses\n\t\tif (!this.reportTosses) return []\n\n\t\t// we only want to convey the result of the last toss between two partners\n\t\tlet tosses: { [props: string]: { won: boolean, against: Subcaucus } } = {}\n\t\tthis._tosses.forEach((toss) => {\n\t\t\ttosses[String(toss.against.id)] = toss\n\t\t})\n\t\treturn Object.keys(tosses).map((key) => tosses[key])\n\t}\n\n\t/**\n\t * Add a delegate due to the remainder allocations.\n\t */\n\taddRemainderDelegate = () => {\n\t\tthis.delegates++\n\t}\n\n\t/**\n\t * A textual representation of the subcaucus.\n\t */\n\tasText = (): string => {\n\t\tlet text = ''\n\n\t\tif (!this.name && !this.count) return text\n\n\t\ttext += this.displayName() + \": \"\n\n\t\ttext += this.count.singularPlural(\"member\", \"members\")\n\n\t\tif (this.delegates === 0) {\n\t\t\ttext += \" in a non-viable subcaucus.\"\n\t\t\treturn text\n\t\t}\n\n\t\ttext += \" may elect \" + this.delegates.singularPlural(\"delegate\", \"delegates\")\n\n\t\tif (this.remainder) {\n\t\t\ttext += \" (\"\n\n\t\t\tif (this.remainder) {\n\t\t\t\ttext += \"remainder \" + this.remainder.decimalPlaces(3)\n\t\t\t}\n\n\t\t\tthis.tosses().forEach((toss) => {\n\t\t\t\ttext += \", \" + (toss.won ? \"won\" : \"lost\") + \" vs \" + toss.against.displayName()\n\t\t\t})\n\n\t\t\tif (this.delegates > this.baseDelegates) {\n\t\t\t\ttext += \", awarded a remainder delegate\"\n\t\t\t}\n\n\t\t\ttext += \")\"\n\t\t}\n\n\t\treturn text + \".\"\n\t}\n\n}","import { number } from \"@mojotech/json-type-validation\";\n\n/**\n * SubCalcPRNG.ts\n *\n * Manages the generation of random numbers.\n *\n * Our random numbers, like most computed random numbers,\n * are not actually random, but rather \"psedo-random\".\n * We just need numbers that are random enough to be a\n * fair approximation of the coin flips in the walking\n * subcaucus process.\n *\n * We do this ourselves so that we know exactly how the\n * numbers were generated and can replicate the exact same\n * \"random\" results on other platforms or when we retrieve\n * caucus information in the future. We do not actually store\n * the computed caucus results, after all, so we need to be\n * able to reliably reproduce them in the future. This means\n * our random numbers need to be predictable and reproducable.\n * \n * This class is based on http://stackoverflow.com/a/22313621/383737\n * but modified to accept strings and turn them into numbers.\n */;\n\n/**\n * Manages the generation of random numbers.\n */\nexport class SubCalcPRNG {\n\n\tmod1 = 4294967087\n\tmul1 = 65539\n\tmod2 = 4294965887\n\tmul2 = 65537\n\tstate1 = 0\n\tstate2 = 0\n\n\t/**\n\t * Can be called with no arguments in order to seed \n\t * the PRNG with the current time, or it can \n\t * be called with either 1 or 2 non-negative integers as arguments \n\t * in order to seed it with those integers. Due to float point \n\t * accuracy seeding with only 1 value will only allow the generator \n\t * to be initiated to one of 2^53 different states.\n\t * \n\t * For convenience, strings supplied to parameters will be \n\t * converted to numbers and all numbers will be converted to\n\t * positive integers.\n\t * \n\t * @param state1 will default to seconds since Unix epoch\n\t * @param state2 will default to value of seed1\n\t */\n\tconstructor(state1: string | number, state2?: string | number) {\n\n\t\tthis.state1 = Math.abs(Math.floor(Number(state1)))\n\t\tthis.state2 = Math.abs(Math.floor(Number(state2)))\n\n\t\tif (isNaN(this.state1) || this.state1 < 1) {\n\t\t\tthis.state1 = Number(new Date())\n\t\t}\n\t\tif (isNaN(this.state2) || this.state2 < 1) {\n\t\t\tthis.state2 = this.state1\n\t\t}\n\t\tthis.state1 = this.state1 % (this.mod1 - 1) + 1\n\t\tthis.state2 = this.state2 % (this.mod2 - 1) + 1\n\t}\n\n\trecord: Array<{ limit: number, result: number }> = []\n\n\t/**\n\t * This PRNG function takes 1 integer limit argument which\n\t * must be in the range 1 to 4294965886. It will return a \n\t * number in the range 0 to limit-1.\n\t * \n\t * For convenience, all numbers will be converted to\n\t * positive integers.\n\t * \n\t * @param limit constrains the result between 0 and limit-1\n\t */\n\trandomUpTo = (limit: number): number => {\n\n\t\tlimit = Math.abs(Math.floor(limit))\n\n\t\tthis.state1 = (this.state1 * this.mul1) % this.mod1\n\t\tthis.state2 = (this.state2 * this.mul2) % this.mod2\n\n\t\tif (\n\t\t\tthis.state1 < limit\n\t\t\t&& this.state2 < limit\n\t\t\t&& this.state1 < this.mod1 % limit\n\t\t\t&& this.state2 < this.mod2 % limit\n\t\t) {\n\t\t\treturn this.randomUpTo(limit)\n\t\t}\n\n\t\tconst result = (this.state1 + this.state2) % limit\n\t\tthis.record.push({ limit: limit, result: result })\n\t\treturn result\n\t}\n\n\t/**\n\t * Like Math.random, this returns a random number\n\t * between 0 and 1.\n\t */\n\trandom = (): number => {\n\t\tconst limit = 4294965885\n\t\treturn this.randomUpTo(limit) / limit\n\t}\n\n\t/**\n\t * This function \"flips a coin\" and returns either \n\t * heads (1) or tails (-1). It is designed for use\n\t * in sorting to produce a random order.\n\t */\n\trandomComparison = (): -1 | 1 => {\n\t\treturn this.randomUpTo(2) ? -1 : 1\n\t}\n\n\trecordSummary = (): { [limit: string]: { [result: string]: number } } => {\n\t\tconst summary: { [limit: string]: { [result: string]: number } } = {}\n\n\t\tthis.record.forEach((r) => {\n\t\t\tlet limit = summary[String(r.limit)]\n\t\t\tif (limit === undefined) {\n\t\t\t\tlimit = {}\n\t\t\t}\n\t\t\tif (limit[String(r.result)] === undefined) {\n\t\t\t\tlimit[String(r.result)] = 1\n\t\t\t} else {\n\t\t\t\tlimit[String(r.result)]++\n\t\t\t}\n\t\t\tsummary[String(r.limit)] = limit\n\t\t})\n\n\t\treturn summary\n\t}\n}","/**\n * Snapshot.ts\n * \n * Holds all the information for a single snapshot.\n * Handles the calculation of delegates for a snapshot.\n * Handles conversion to and from JSON.\n */\n\n// see https://github.com/ClickSimply/typescript-map\nimport { TSMap } from 'typescript-map'\n\n// see: https://github.com/mojotech/json-type-validation\nimport { Decoder, object, string, number, dict } from '@mojotech/json-type-validation'\n\n// local to this app\nimport * as _u from './Utilities'\nimport { Subcaucus } from './Subcaucus'\nimport { SubCalcPRNG } from './SubCalcPRNG'\n\ndeclare global {\n\n\tinterface SnapshotInitializer {\n\t\tdevice: number\n\t\tcreated: TimestampString\n\t\twith?: {\n\t\t\trevised?: TimestampString\n\t\t\trevision?: string\n\t\t\tname?: string\n\t\t\tallowed?: number\n\t\t\tseed?: number\n\t\t\tsubcaucuses?: TSMap<number, Subcaucus>\n\t\t},\n\t\tjson?: SnapshotJSON\n\t}\n\n\tinterface SnapshotJSON {\n\t\tdevice: number\n\t\tcreated: TimestampString\n\t\trevised: TimestampString\n\t\trevision: string\n\t\tname: string\n\t\tallowed: number\n\t\tseed: number\n\t\tsubcaucuses: { [id: string]: SubcaucusJSON }\n\t}\n\n}\n\nexport class Snapshot {\n\n\tdebugID = ` ------ ${_u.uniqueNumber()} ------ `\n\tdebug = (): string => {\n\t\treturn \"\\nSnapshot\" + this.debugID + \"\\n\"\n\t\t\t+ this.name + \"/\" + this.revision + \"/\" + this.allowed\n\t\t\t+ \" \" + this.subcaucuses.map((s) => s.debug()).join(\", \")\n\t}\n\tcreated: TimestampString\n\tdevice: number\n\trevised: TimestampString\n\trevision: string\n\tname: string\n\tallowed: number\n\tseed: number\n\tsubcaucuses: TSMap<number, Subcaucus>\n\tchanges = 0\n\n\tstatic decoder: Decoder<SnapshotJSON> = object({\n\t\tdevice: number(),\n\t\tcreated: string(),\n\t\trevised: string(),\n\t\trevision: string(),\n\t\tname: string(),\n\t\tallowed: number(),\n\t\tseed: number(),\n\t\tsubcaucuses: dict(Subcaucus.decoder)\n\t})\n\n\t/**\n\t * Creates a new snapshot instance.\n\t * \n\t * ```typescript\n\t * interface SnapshotInitializer {\n\t *   device: number\n\t *   created: TimestampString\n\t *   with?: {\n\t * \t   revised?: TimestampString\n\t * \t   revision?: string\n\t * \t   name?: string\n\t * \t   allowed?: number\n\t * \t   seed?: number\n\t * \t   subcaucuses?: TSMap<number, Subcaucus>\n\t *   }\n\t *   json?: SnapshotJSON\n\t * }\n\t * ```\n\t * \n\t * @param {SnapshotInitializer} init\n\t */\n\tconstructor(init: SnapshotInitializer) {\n\t\tthis.created = init.created\n\t\tthis.device = init.device\n\t\tthis.revised = _u.now()\n\t\tthis.revision = ''\n\t\tthis.name = ''\n\t\tthis.allowed = 0\n\t\tthis.seed = _u.randomSeed()\n\t\tthis.subcaucuses = new TSMap<number, Subcaucus>()\n\n\t\tif (init.with) {\n\t\t\tthis.revised = init.with[\"revised\"] || this.revised\n\t\t\tthis.revision = init.with[\"revision\"] || this.revision\n\t\t\tthis.name = init.with[\"name\"] || this.name\n\t\t\tthis.allowed = init.with[\"allowed\"] || this.allowed\n\t\t\tthis.seed = init.with[\"seed\"] || this.seed\n\t\t\tif (init.with[\"subcaucuses\"]) {\n\t\t\t\tthis.subcaucuses = init.with[\"subcaucuses\"]\n\t\t\t}\n\t\t}\n\n\t\tif (init.json) {\n\t\t\tthis.fromJSON(init.json)\n\t\t}\n\n\t}\n\n\t/**\n\t * Provide a copy of this instance of a snapshot,\n\t * including deep copies of the subcaucuses.\n\t * \n\t * See: https://www.nickang.com/how-to-clone-class-instance-javascript/\n\t */\n\trecreate = (): Snapshot => {\n\t\t// TSMap clones break classes and don't go deep enough\n\t\t// so we loop through and recreate subcaucuses\n\t\tlet subcaucuses = new TSMap<number, Subcaucus>()\n\t\tthis.subcaucuses.forEach((subcaucus) => {\n\t\t\tsubcaucuses.set(subcaucus.id, subcaucus.recreate())\n\t\t})\n\t\treturn new Snapshot({\n\t\t\tdevice: this.device,\n\t\t\tcreated: this.created,\n\t\t\twith: {\n\t\t\t\trevised: this.revised,\n\t\t\t\trevision: this.revision,\n\t\t\t\tname: this.name,\n\t\t\t\tallowed: this.allowed,\n\t\t\t\tseed: this.seed,\n\t\t\t\tsubcaucuses: subcaucuses\n\t\t\t}\n\t\t})\n\t}\n\n\t/**\n\t * Return a JSON object version of the data in this\n\t * class wants to share.\n\t */\n\ttoJSON = (): {\n\t\tcreated: TimestampString\n\t\tdevice: number\n\t\trevised: TimestampString\n\t\trevision: string\n\t\tname: string\n\t\tallowed: number\n\t\tseed: number\n\t\tsubcaucuses: any\n\t} => {\n\t\treturn {\n\t\t\tcreated: this.created,\n\t\t\tdevice: this.device,\n\t\t\trevised: this.revised,\n\t\t\trevision: this.revision,\n\t\t\tname: this.name,\n\t\t\tallowed: this.allowed,\n\t\t\tseed: this.seed,\n\t\t\tsubcaucuses: this.subcaucuses.toJSON(),\n\t\t}\n\t}\n\n\tfromJSON = (json: SnapshotJSON) => {\n\t\tconst decoded = Snapshot.decoder.run(json)\n\n\t\tif (decoded.ok) {\n\t\t\tthis.created = decoded.result.created\n\t\t\tthis.device = decoded.result.device\n\t\t\tthis.revised = decoded.result.revised\n\t\t\tthis.revision = decoded.result.revision\n\t\t\tthis.name = decoded.result.name\n\t\t\tthis.allowed = decoded.result.allowed\n\t\t\tthis.seed = decoded.result.seed\n\t\t\tthis.subcaucuses = new TSMap<number, Subcaucus>()\n\t\t\tObject.keys(decoded.result.subcaucuses).forEach((key) => {\n\t\t\t\tconst jsub = decoded.result.subcaucuses[key]\n\t\t\t\tconst keyNum = Number(key)\n\t\t\t\tthis.subcaucuses.set(keyNum, new Subcaucus({\n\t\t\t\t\tid: keyNum,\n\t\t\t\t\tjson: jsub\n\t\t\t\t}))\n\t\t\t})\n\t\t} else {\n\t\t\t_u.debug(decoded.error)\n\t\t}\n\t}\n\n\t/**\n\t * Update the snapshot with new values. \n\t * If signalling a change to subcaucuses\n\t * just send without any update.\n\t * \n\t * Revising the snapshot forces a \n\t * redistribution of delegates.\n\t */\n\trevise = (update?: {\n\t\tname?: string,\n\t\tallowed?: number,\n\t\tseed?: number,\n\t}) => {\n\t\t// we mark the snapshot as revised even if no updates were sent\n\t\t// because it may be a signal that the subcaucuses changed\n\t\tthis.revised = _u.now()\n\t\tthis.revision = \"\"\n\t\tif (update) {\n\t\t\tif (update.name) {\n\t\t\t\tthis.name = update.name\n\t\t\t}\n\t\t\tif (update.allowed) {\n\t\t\t\tthis.allowed = update.allowed\n\t\t\t}\n\t\t\tif (update.seed) {\n\t\t\t\tthis.seed = update.seed\n\t\t\t}\n\t\t}\n\t\tthis.redistributeDelegates()\n\t}\n\n\t/**\n\t * The number of people \"in the room\"\n\t * (the total of subcaucus counts).\n\t */\n\troom = 0\n\n\t/**\n\t * The total number of delegates allocated.\n\t */\n\ttotalDelegates = 0\n\n\t/**\n\t * The number of people in the room divided by the number of delegates allowed.\n\t */\n\tviability = 0\n\n\t/**\n\t * The number of members a subcaucus must have to be viable.\n\t */\n\twholeViability = 0\n\n\t/**\n\t * The number of people who are members of viable subcaucuses\n\t */\n\tviableRoom = 0\n\n\t/**\n\t * The total number of people who are members of viable subcaucuses\n\t * divided by the number of delegates allowed.\n\t */\n\tdelegateViability = 0\n\n\t/**\n\t * Recalculate the delegate numbers for this snapshot.\n\t */\n\tredistributeDelegates = () => {\n\t\t_u.debug(\"Distributing delegates\");\n\n\t\tif (!this.allowed) return\n\n\t\tconst subs = this.subcaucuses.values()\n\n\t\tlet scIncludeRemainderStatement = false; // will be set true if there is a coin flip\n\n\t\t// first clear out all the delegate information\n\t\tsubs.forEach((s) => s.clearDelegateInfo())\n\n\t\t// \"Step No. 1: Add up the total number of members of all the subcaucuses.\" (room)\n\t\tthis.room = subs.reduce((acc, sub) => {\n\t\t\treturn acc + sub.count\n\t\t}, 0)\n\n\t\tif (!this.room) return\n\n\t\t// \"Step No. 2: Divide the result of Step No. 1\" (room)\n\t\t// \"by the total number of delegates to be elected,\" (allowed)\n\t\t// \"round the result up to the next whole number.\" (wholeViability)\n\t\t// \"This is the viability number.\" \n\t\t// (this contradicts the example, which uses viability rather than wholeViability)\n\n\t\tthis.viability = this.room / this.allowed\n\t\tthis.wholeViability = Math.ceil(this.viability)\n\n\t\t// determine which subcaucuses are viable (viabilityScore >= 1)\n\t\t// and calculate the total number viable people in the room (viableRoom)\n\n\t\tconst vSubs = subs.filter((s) => s.count >= this.wholeViability)\n\t\tthis.viableRoom = vSubs.reduce((acc, sub) => {\n\t\t\treturn acc + sub.count\n\t\t}, 0)\n\n\t\tif (!this.viableRoom) return\n\n\t\t// recalculate the viability number for the delegate allocation process\n\t\tthis.delegateViability = this.viableRoom / this.allowed;\n\n\t\t// calculate how many delegates each viable subcaucus gets\n\t\tvSubs.forEach((s) => s.setViability(this.delegateViability))\n\n\t\t// and add up the number of delegates assigned\n\t\tthis.totalDelegates = vSubs.reduce((acc, sub) => {\n\t\t\treturn acc + sub.baseDelegates\n\t\t}, 0)\n\n\t\t// now sort and assign the remainders\n\n\t\t// seed a new random number generator so that we get consistent random results\n\t\tconst scRand = new SubCalcPRNG(this.seed)\n\n\t\tlet vSubRanks = vSubs.map((s) => s.id)\n\n\t\t// see: https://bost.ocks.org/mike/shuffle/\n\t\t// and: https://stackoverflow.com/a/2450976\n\t\tlet m = vSubRanks.length\n\n\t\t// While there remain elements to shuffle…\n\t\twhile (m) {\n\t\t\t// Pick a remaining element…\n\t\t\tconst i = scRand.randomUpTo(m--)\n\n\t\t\t// And swap it with the current element.\n\t\t\tconst temp = vSubRanks[m]\n\t\t\tvSubRanks[m] = vSubRanks[i]\n\t\t\tvSubRanks[i] = temp\n\t\t}\n\n\t\t// sort the subcaucuses into remainder order with highest remainders first\n\t\tvSubs.sort((a, b) => {\n\t\t\tif (a.remainder > b.remainder) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\telse if (a.remainder < b.remainder) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\t// at this point we have a tie of remainders, so we have to \"flip a coin\"\n\n\t\t\t/*\tA note about \"coin-flips\" or \"drawing lots\"...\n\t\t\n\t\t\t\tTraditionally, when there are delegates remaining to be assigned and\n\t\t\t\ttwo subcaucuses are \"tied\" with the same size delegations, the chair\n\t\t\t\tof the caucus will use some method of assigning those remaining delegates\n\t\t\t\tat random. These methods include coin-flips or drawing lots.\n\t\t\n\t\t\t\tIn this program we accomplish the same randomness, but we do so by first\n\t\t\t\tbuilding this \"rank order\" for remainders to be assigned. It is as though\n\t\t\t\twe flipped the coins before we had a tie and just said that in the event of\n\t\t\t\ta tie we will assign delegates in this (predetermined but random) order.\n\t\t\n\t\t\t\tHowever, since it is possible for this order to shift each time the calculation\n\t\t\t\tis run, it could be that the exact same set of counts for subcaucuses could result\n\t\t\t\tin slightly different delegate assignments from time to time.\n\t\t\t \n\t\t\t\tAt this point in the code, we've determined that two delegation have\n\t\t\t\tthe exact same amount of \"remainder\". The next line of code flips the\n\t\t\t\tcoin to predetermine the order in which these two delegations will be\n\t\t\t\tassigned delegates.\n\t\t\t*/\n\n\t\t\tconst coinFlip = vSubRanks.indexOf(a.id) < vSubRanks.indexOf(b.id) ? -1 : 1\n\n\t\t\t// report the coin flip to each subcaucus\n\t\t\ta.coinToss(coinFlip === -1, b)\n\t\t\tb.coinToss(coinFlip === 1, a)\n\n\t\t\t// return the coin flip as the result of this comparison\n\t\t\treturn (coinFlip);\n\t\t})\n\n\t\t// walk though the now-ranked subcaucuses to assign any remainders\n\t\t// this would be much simpler, exept we want to keep track of who\n\t\t// will really need to know details about tosses.\n\t\tlet remainder = -1\n\t\tlet reportingTo: Array<Subcaucus> = []\n\t\tlet justAddedRemainderDelegate = false\n\t\tvSubs.forEach((s) => {\n\t\t\tif (this.totalDelegates < this.allowed) {\n\t\t\t\tthis.totalDelegates++\n\t\t\t\ts.addRemainderDelegate()\n\t\t\t\tjustAddedRemainderDelegate = true\n\t\t\t\tif (remainder != s.remainder) {\n\t\t\t\t\t// this means that all of the previous\n\t\t\t\t\t// remainder were assigned remainder delegates\n\t\t\t\t\t// so we don't have to report coin tosses\n\t\t\t\t\treportingTo = []\n\t\t\t\t\tremainder = s.remainder\n\t\t\t\t}\n\t\t\t\treportingTo.push(s)\n\t\t\t} else {\n\t\t\t\tif (remainder == s.remainder) {\n\t\t\t\t\treportingTo.push(s)\n\t\t\t\t} else {\n\t\t\t\t\tif (justAddedRemainderDelegate) {\n\t\t\t\t\t\t// since the last remainder that got\n\t\t\t\t\t\t// a remainder delegate was not the same\n\t\t\t\t\t\t// as this remainder, it means there was\n\t\t\t\t\t\t// no contest between equal remainders,\n\t\t\t\t\t\t// so we don't have to report coin tosses\n\t\t\t\t\t\treportingTo = []\n\t\t\t\t\t}\n\t\t\t\t\tremainder = -1\n\t\t\t\t}\n\t\t\t\tjustAddedRemainderDelegate = false\n\t\t\t}\n\t\t})\n\t\t// those subcaucuses left in the report remainder list\n\t\t// should eventually report their coin tosses\n\t\treportingTo.forEach((s) => {\n\t\t\ts.reportTosses = true\n\t\t})\n\n\t\tconsole.log(\"random summary\", scRand.recordSummary())\n\n\t\tthis.changes++ // this is used to help refresh component keys\n\n\t}\n\n\t/**\n\t * Derive the appropriate meeting key from\n\t * the data in this snapshot.\n\t */\n\tmeetingKey = (): string => {\n\t\treturn `${this.created} ${this.device}`\n\t}\n\n\t/**\n\t * Derive the appropriate snapshot key from\n\t * the data in this snapshot.\n\t */\n\tsnapshotKey = (): string => {\n\t\treturn `${this.created} ${this.device} ${this.revised}`\n\t}\n\n\t/**\n\t * The next ID in use for subcacuses in this snapshot.\n\t * \n\t * One more than the current maximum ID.\n\t */\n\tnextSubcaucusID = (): number => {\n\t\tif (this.subcaucuses.length === 0) {\n\t\t\treturn 1\n\t\t}\n\t\tconst max = Math.max(...this.subcaucuses.keys())\n\t\treturn max + 1\n\t}\n\n    /**\n     * Add a subcaucus (empty by default).\n     */\n\taddSubcaucus = (name = '', count = 0, delegates = 0) => {\n\t\tconst newID = this.nextSubcaucusID()\n\t\tthis.subcaucuses.set(newID, new Subcaucus({\n\t\t\tid: newID,\n\t\t\twith: {\n\t\t\t\tname: name,\n\t\t\t\tcount: count,\n\t\t\t\tdelegates: delegates\n\t\t\t}\n\t\t}))\n\t}\n\n\t/**\n\t * Delete a subcaucus from this snapshot.\n\t */\n\tdeleteSubcaucus = (id: number) => {\n\t\tthis.subcaucuses.delete(id)\n\t}\n\n\t/**\n\t * A textual representation of the state of this snapshot.\n\t */\n\tasText = (): string => {\n\t\tlet text = \"\"\n\n\t\ttext += `${this.name} ${this.revision ? `(${this.revision}) ` : ''}was allowed ${this.allowed.singularPlural(\"delegate\", \"delegates\")}.\\n\\n`\n\n\t\tthis.subcaucuses.forEach((subcaucus) => {\n\t\t\tconst sText = subcaucus.asText()\n\t\t\ttext += sText ? sText + \"\\n\\n\" : ''\n\t\t})\n\n\t\ttext += `${this.room.singularPlural(\"person was\", \"people were\")} in the room which made the initial viability number ${this.viability.decimalPlaces(3)}. \\nAt least ${this.wholeViability.singularPlural(\"member was\", \"members were\")} needed to make a subcaucus viable.\\n`\n\n\t\tif (this.room > this.viableRoom) {\n\t\t\ttext += `${(this.room - this.viableRoom).singularPlural(\"person was\", \"people were\")} in a non-viable caucus, you may want to consider another round of walking.\\n`\n\t\t\ttext += `The recalculated viability number for allocating delegates was ${this.delegateViability.decimalPlaces(3)}.`\n\t\t}\n\n\t\ttext += \"\\n\\n\"\n\n\t\ttext += `Coin(random seed) was ${this.seed}.\\n`\n\t\ttext += `Last revised ${(new Date(Date.parse(this.revised))).toLocaleString()}\\n`\n\t\treturn text\n\t}\n\n}","/**\n * SubCalcStorage.ts\n * \n * Manages storage in app or localStorage.\n * Handles conversion to and from JSON.\n */\n\n// see https://github.com/ClickSimply/typescript-map\nimport { TSMap } from 'typescript-map'\n\n// see: https://github.com/mojotech/json-type-validation\nimport { Decoder, object, string, number, array } from '@mojotech/json-type-validation'\n\n// local to this app\nimport * as _u from './Utilities'\nimport { Snapshot } from './Snapshot'\n\ndeclare global {\n\n\t/**\n\t * JSON representation of subcalc2 in storage.\n\t */\n\tinterface SubCalcJSON {\n\t\tv: number\n\t\tdevice: number\n\t\tsnapshot: SnapshotJSON\n\t}\n\n}\n\n/**\n * Manages storage in app or localStorage.\n * Handles conversion to and from JSON.\n */\nexport class SubCalc {\n\n\tdebug = (): string => {\n\t\treturn this.snapshot.debug()\n\t}\n\n\t/**\n\t * Version helps to future-proof the stored JSON.\n\t */\n\tversion = 2\n\n\t/**\n\t * This device is just a random number that will help\n\t * distinguish meeting identifiers if they start to be\n\t * shared among devices. Hopefully a combination of \n\t * device and meeting creation date won't collide.\n\t */\n\tdevice: number\n\n\t/**\n\t * This is the snapshot that is currently being\n\t * edited. The unique creator and device combo \n\t * will make it part of a \"meeting\".\n\t * \n\t * This snapshot will always be its own unique object,\n\t * separate from the saved snapshots. The saved snapshots\n\t * are only used to \"load up\" this one. This is the only\n\t * one the App ever tries to change.\n\t */\n\tsnapshot: Snapshot\n\n\t/**\n\t * A prefix to be used when creating local storage items\n\t * for each snapshot.\n\t */\n\tstoredSnapshotPrefix = \"sc-save\"\n\n\t/**\n\t * A prefix for snapshots in local storage trash.\n\t */\n\ttrashedSnapshotPrefix = \"sc-trash\"\n\n\t/**\n\t * The json-type-validation decoder for this class.\n\t */\n\tstatic decoder: Decoder<SubCalcJSON> = object({\n\t\tv: number(),\n\t\tdevice: number(),\n\t\tsnapshot: Snapshot.decoder,\n\t})\n\n\t/**\n\t * Create an instance of a storage object to manage local storage.\n\t */\n\tconstructor() {\n\n\t\t// no device means that subcalc has never run in this browser\n\t\t// so we gather together some basics about this instance\n\n\t\tthis.device = _u.randomSeed()\n\n\t\t// a poorly formed snapshot to mark failure of the read\n\t\tthis.snapshot = new Snapshot({ device: 0, created: \"\" })\n\n\t\t// then we look for local data\n\t\t// if found, it will override the values above\n\n\t\tthis.read()\n\n\t\t// check to see if the read succeeded\n\t\tif (!this.snapshot.created) {\n\n\t\t\t// since no actual snapshot was assigned\n\t\t\t// we will get a real one now\n\n\t\t\tthis.snapshot = this.newSnapshot()\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns a string to be used to retrive a snapshot from local storage.\n\t * \n\t * Returns the key for the current shapshot by default.\n\t */\n\tstoredSnapshotKey = (snapshot?: Snapshot) => {\n\t\tif (snapshot === undefined) {\n\t\t\tsnapshot = this.snapshot\n\t\t}\n\t\treturn `${this.storedSnapshotPrefix} ${snapshot.snapshotKey()}`\n\t}\n\n\t/**\n\t * Return an array of all the snapshots found in local storage.\n\t */\n\tsnapshots = (status: 'saved' | 'trashed' = 'saved'): Array<Snapshot> => {\n\t\tlet snapshots: Array<Snapshot> = []\n\n\t\tconst length = localStorage.length\n\t\tconst prefix = status === 'saved'\n\t\t\t? this.storedSnapshotPrefix\n\t\t\t: this.trashedSnapshotPrefix\n\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\tconst storedKey = localStorage.key(i)\n\t\t\tif (!storedKey) break\n\t\t\tif (storedKey.startsWith(prefix)) {\n\t\t\t\tconst snapshot = this.readSnapshot(storedKey)\n\t\t\t\tif (snapshot) {\n\t\t\t\t\tsnapshots.push(snapshot)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn snapshots\n\t}\n\n\t/**\n\t * Ensures that not only is the current meeting set properly,\n\t * but that this change is reflected in local storage as well.\n\t * Returns the new copy of the snapshot now considered current.\n\t * \n\t * NOTE: This method recreates the snapshot as the current\n\t * snapshot so that all connections to the orginal are broken.\n\t */\n\tsetSnapshot = (snapshot: Snapshot): Snapshot => {\n\t\tthis.snapshot = snapshot.recreate()\n\t\tthis.write()\n\t\treturn this.snapshot\n\t}\n\n\t/**\n\t * Creates a new snapshot, amounting to a new meeting.\n\t */\n\tnewSnapshot = (): Snapshot => {\n\t\tconst created = _u.now()\n\n\t\t// first create a new snapshot and make it current\n\t\tconst snapshot = new Snapshot({\n\t\t\tdevice: this.device,\n\t\t\tcreated: created\n\t\t})\n\n\t\t// add three subcaucuses to give the user a clue\n\t\tsnapshot.addSubcaucus()\n\t\tsnapshot.addSubcaucus()\n\t\tsnapshot.addSubcaucus()\n\n\t\t// make this the current snapshot\n\t\tthis.setSnapshot(snapshot)\n\n\t\t// note, we return the copy of the snapshot we\n\t\t// want used, which is this.snapshot, not snapshot\n\t\treturn this.snapshot\n\t}\n\n\t/**\n\t * Creates a duplicate of the current snapshot, \n\t * giving it a new created date and new name,\n\t * amounting to a new meeting.\n\t * \n\t * Note, it will keep the same random seed (\"coin\")\n\t * as the original.\n\t */\n\tduplicateSnapshot = (): Snapshot => {\n\t\t// first create a new snapshot and make it current\n\t\tthis.snapshot.created = _u.now()\n\t\tthis.snapshot.name = `Copy of ${this.snapshot.name}`\n\t\tthis.snapshot.revised = this.snapshot.created\n\t\tthis.snapshot.revision = \"\"\n\n\t\t// make this the current snapshot\n\t\tthis.setSnapshot(this.snapshot)\n\n\t\t// note, we return the copy of the snapshot we\n\t\t// want used, which is this.snapshot, not snapshot\n\t\treturn this.snapshot\n\t}\n\n\t/**\n\t * Write the current subcalc2 item out to local storage.\n\t * \n\t * This includes writing the current snapshot out.\n\t */\n\twrite = () => {\n\t\tconst jsonSubCalc = {\n\t\t\tv: this.version,\n\t\t\tdevice: this.device,\n\t\t\tsnapshot: this.snapshot.toJSON()\n\t\t}\n\t\ttry {\n\t\t\tconst jsonSubCalcString = JSON.stringify(jsonSubCalc)\n\t\t\t_u.debug(\"storing subcalc2\", jsonSubCalcString)\n\t\t\tlocalStorage.setItem(\"subcalc2\", jsonSubCalcString)\n\t\t} catch (e) {\n\t\t\t_u.alertUser(new Error(\"Failed to save subcalc2 to local storage\"), e)\n\t\t}\n\t}\n\n\t/**\n\t * Write a single snapshot to local storage.\n\t * \n\t * Defaults to writing the current snapshot.\n\t */\n\twriteSnapshot = (snapshot?: Snapshot) => {\n\t\t// default to this.snapshot and if it is this.snapshot then write the subcalc2 record\n\t\tif (!snapshot) {\n\t\t\tsnapshot = this.snapshot\n\t\t}\n\t\tif (snapshot === this.snapshot) {\n\t\t\tthis.write()\n\t\t}\n\t\t// if the snapshot is a revision, then save it in its own place as well\n\t\tif (snapshot.revision) {\n\t\t\tconst storedSnapshotKey = this.storedSnapshotKey(snapshot)\n\t\t\tconst jsnap = snapshot.toJSON()\n\t\t\ttry {\n\t\t\t\tconst jsnapString = JSON.stringify(jsnap)\n\t\t\t\t_u.debug(`storing ${storedSnapshotKey}`, jsnapString)\n\t\t\t\tlocalStorage.setItem(storedSnapshotKey, jsnapString)\n\t\t\t} catch (e) {\n\t\t\t\t_u.alertUser(new Error(`Error saving ${storedSnapshotKey} to local storage`), e)\n\t\t\t\treturn\n\t\t\t}\n\t\t} else if (snapshot != this.snapshot) {\n\t\t\t_u.alertUser(new Error(\"Snapshot was not saved.\"), snapshot)\n\t\t}\n\t}\n\n\t/**\n\t * Pass along a revision to the snapshot,\n\t * then write the snapshot to local storage.\n\t */\n\treviseSnapshot = (update?: {\n\t\tname?: string,\n\t\tallowed?: number,\n\t\tseed?: number,\n\t}, snapshot?: Snapshot) => {\n\t\tif (!snapshot) {\n\t\t\tsnapshot = this.snapshot\n\t\t}\n\t\tsnapshot.revise(update)\n\t\tthis.writeSnapshot()\n\t}\n\n\t/**\n\t * Saves a snapshot with the given revision name.\n\t */\n\tsaveSnapshot = (revision: string) => {\n\t\tthis.snapshot.revision = revision\n\t\tthis.writeSnapshot()\n\t}\n\n\t/**\n\t * Uses the current snapshot to rename the meeting by propagating\n\t * that change to all the other snapshots in the meeting.\n\t */\n\trenameMeeting = (name: string) => {\n\t\t// rename the current snapshot\n\t\tthis.snapshot.name = name\n\t\tthis.write()\n\t\tconst meetingKey = this.snapshot.meetingKey()\n\t\tthis.snapshots().forEach((snapshot) => {\n\t\t\tif (snapshot.meetingKey() === meetingKey) {\n\t\t\t\tsnapshot.name = name\n\t\t\t\tthis.writeSnapshot(snapshot)\n\t\t\t}\n\t\t})\n\t}\n\n\t/**\n\t * Remove a snapshot from local storage. If this is the last\n\t * snapshot in a meeting, this will also remove the meeting.\n\t * \n\t * NOTE: This method will not remove the \"current\" snapshot.\n\t */\n\tdeleteSnapshot = (snapshot: Snapshot) => {\n\t\tconst snapshotKey = snapshot.snapshotKey()\n\t\tlocalStorage.removeItem(snapshotKey)\n\t}\n\n\t/**\n\t * Try to populate this instance with subcalc2 data from local storage.\n\t */\n\tread = () => {\n\t\tlet json: SubCalcJSON\n\n\t\ttry {\n\t\t\tjson = JSON.parse(localStorage.getItem(\"subcalc2\") || 'false')\n\t\t} catch (e) {\n\t\t\t_u.debug(e)\n\t\t\treturn\n\t\t}\n\n\t\tif (json) {\n\n\t\t\tlet decoded = SubCalc.decoder.run(json)\n\n\t\t\tif (decoded.ok) {\n\t\t\t\tif (this.version !== decoded.result.v) {\n\t\t\t\t\t_u.debug(`Expected subcalc version ${this.version}, got ${decoded.result.v}`)\n\t\t\t\t}\n\t\t\t\tthis.device = decoded.result.device\n\t\t\t\tthis.snapshot = new Snapshot({\n\t\t\t\t\tdevice: decoded.result.snapshot.device,\n\t\t\t\t\tcreated: decoded.result.snapshot.created,\n\t\t\t\t\tjson: decoded.result.snapshot\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\t_u.debug(decoded.error)\n\t\t\t}\n\n\t\t} else {\n\t\t\t// TODO: check for old subcalc1 data\n\t\t}\n\t}\n\n\t/**\n\t * Given a snapshot key, this functions looks for that meeting in\n\t * local storage and returns a new meeting object to holding that information.\n\t */\n\treadSnapshot = (storedSnapshotKey: string): Snapshot | undefined => {\n\t\tlet json: SnapshotJSON\n\n\t\ttry {\n\t\t\tjson = JSON.parse(localStorage.getItem(storedSnapshotKey) || 'false')\n\t\t} catch (e) {\n\t\t\t_u.debug(e)\n\t\t\treturn undefined\n\t\t}\n\n\t\tconst decoded = Snapshot.decoder.run(json)\n\n\t\tif (decoded.ok) {\n\t\t\treturn new Snapshot({\n\t\t\t\tcreated: decoded.result.created,\n\t\t\t\tdevice: decoded.result.device,\n\t\t\t\tjson: decoded.result\n\t\t\t})\n\t\t} else {\n\t\t\t_u.debug(decoded.error)\n\t\t}\n\n\t\treturn undefined\n\n\t}\n\n}","import * as React from 'react'\n// see https://github.com/ClickSimply/typescript-map\nimport { TSMap } from 'typescript-map'\n// see https://www.primefaces.org/primereact\nimport { Button } from 'primereact/button'\nimport { Menubar } from 'primereact/menubar'\nimport { Accordion, AccordionTab } from 'primereact/accordion';\n// local to this app\nimport * as _u from './Utilities'\nimport { SubCalc } from './SubCalc'\nimport { Snapshot } from './Snapshot'\nimport { ValueCard } from './ValueCard'\n\n/**\n * Facilitates sorting up or down (or not at all), as needed.\n */\nenum SortOrder {\n    Descending = -1,\n    None = 0,\n    Ascending = 1,\n}\n\ninterface Props {\n    subcalc: SubCalc\n    onLoad: ((snapshot?: Snapshot) => void)\n    onNew: (() => void)\n}\ninterface State {\n    sortBy: 'name' | 'date'\n}\n\nexport class Loader extends React.Component<Props, State> {\n\n    constructor(props: Props) {\n        super(props)\n        this.state = {\n            sortBy: \"date\"\n        }\n    }\n\n    /**\n     * Returns JSX for the menubar.\n     * \n     * NOTE: Do not `setState()` in this method.\n     */\n    renderMenu = (): JSX.Element => {\n        const items: any = []\n        items.push({\n            label: \"Back to the calculator\",\n            icon: \"pi pi-fw pi-caret-left\",\n            command: () => this.props.onLoad()\n        })\n        return <Menubar key=\"loader-menu\" model={items} id=\"app-main-menu\" />\n    }\n\n    /**\n     * Returns an icon to represent the button.\n     */\n    sortOrderIcon = (button: 'name' | 'date'): string => {\n        return button === 'name'\n            ? this.state.sortBy === \"name\"\n                ? \"pi pi-chevron-circle-up\"\n                : \"pi pi-chevron-circle-off\"\n            : this.state.sortBy === \"date\"\n                ? \"pi pi-chevron-circle-down\"\n                : \"pi pi-chevron-circle-off\"\n    }\n\n    toggleSortOrder = () => {\n        this.setState({\n            sortBy: this.state.sortBy === \"name\"\n                ? \"date\"\n                : \"name\"\n        })\n    }\n\n    deleteSnapshot = (snapshot: Snapshot) => {\n        this.props.subcalc.deleteSnapshot(snapshot)\n        this.forceUpdate\n    }\n\n    renderSnapshot = (snapshot: Snapshot): JSX.Element => {\n        const created = new Date(Date.parse(snapshot.created))\n        const createdDate = created.toLocaleString(undefined, {\n            year: 'numeric',\n            month: 'numeric',\n            day: 'numeric',\n        })\n        const revised = new Date(Date.parse(snapshot.revised))\n        const revisedDate = revised.toLocaleString(undefined, {\n            year: 'numeric',\n            month: 'numeric',\n            day: 'numeric',\n        })\n        const revisedString = createdDate === revisedDate\n            ? revised.toLocaleString(undefined, {\n                hour: 'numeric',\n                minute: '2-digit',\n                second: undefined,\n            })\n            : revised.toLocaleString(undefined, {\n                year: 'numeric',\n                month: 'numeric',\n                day: 'numeric',\n                hour: 'numeric',\n                minute: '2-digit',\n                second: undefined,\n            })\n\n        return (\n            <div key={`loader-snapshot-${snapshot.revised}-${snapshot.device}`} className={`loader-snapshot`}>\n                <div className=\"loader-snapshot-button button\"\n                    onClick={() => this.props.onLoad(snapshot)}\n                >\n                    <div className=\"loader-snapshot-revised\">\n                        {revisedString}\n                    </div>\n                    <div className=\"loader-snapshot-name\">\n                        <span className={\"pi pi-clock\"}>&nbsp;</span>\n                        {snapshot.revision}\n                    </div>\n                </div>\n                <div className=\"loader-snapshot-actions\">\n                    <Button\n                        icon=\"pi pi-trash\"\n                        className=\"p-button-danger\"\n                        onClick={() => this.deleteSnapshot(snapshot)}\n                    />\n                </div>\n            </div>\n        )\n    }\n\n    renderSnapshots = (snapshots: TSMap<string, Snapshot>): JSX.Element => {\n        return (\n            <>\n                {snapshots.map((snapshot) => {\n                    return this.renderSnapshot(snapshot)\n                })}\n            </>\n        )\n    }\n\n    /**\n     * A method to sort snapshots by date.\n     */\n    sortBySnapshotRevision = (a: Snapshot, b: Snapshot): number => {\n        let comparison = 0\n        const revA = `${a.created} ${a.device} ${a.revised}`\n        const revB = `${b.created} ${b.device} ${b.revised}`\n        if (revA < revB) {\n            comparison = 1;\n        }\n        if (revA > revB) {\n            comparison = -1;\n        }\n        return comparison\n    }\n\n    /**\n     * A method to sort snapshots by name.\n     */\n    sortBySnapshotName = (a: Snapshot, b: Snapshot): number => {\n        let comparison = 0\n        const revA = `${a.name} ${a.created} ${a.device} ${a.revision}`.toUpperCase()\n        const revB = `${b.name} ${b.created} ${b.device} ${b.revision}`.toUpperCase()\n        if (revA < revB) {\n            comparison = -1;\n        }\n        if (revA > revB) {\n            comparison = 1;\n        }\n        return comparison\n    }\n\n    renderMeeting = (snapshots: Array<Snapshot>): JSX.Element => {\n        const snap = snapshots[0]\n        const snapshotsJSX = snapshots.map((snapshot) => this.renderSnapshot(snapshot))\n\n        const created = new Date(Date.parse(snap.created))\n        const createdDate = created.toLocaleString(undefined, {\n            year: 'numeric',\n            month: 'numeric',\n            day: 'numeric',\n            hour: 'numeric',\n            minute: '2-digit',\n            second: undefined,\n        })\n\n        return (\n            <AccordionTab key={`loader-meeting-${snap.meetingKey()} ${this.state.sortBy}`}\n                headerClassName=\"loader-meeting-accordion-header\"\n                contentClassName=\"loader-meeting-accordion-content\"\n                header={\n                    <div className=\"loader-meeting-header\">\n                        <div className=\"loader-meeting-name\">{snap.name}</div>\n                        <div className=\"loader-meeting-timestamp\">{createdDate}</div>\n                    </div>\n                }\n            >\n                {snapshotsJSX}\n            </AccordionTab>\n        )\n\n    }\n\n    renderMeetings = (): JSX.Element => {\n        const snapshots = this.props.subcalc.snapshots()\n\n        if (snapshots.length === 0) {\n            return (\n                <ValueCard key=\"nothing-to-load\"\n                    title=\"No snapshots yet\"\n                    description=\"You will have to save a snapshot before you can open one!\"\n                    footer={\n                        <Button key=\"nothing-to-load-button\"\n                            label=\"OK\"\n                            icon=\"pi pi-check\"\n                            onClick={() => this.props.onLoad()}\n                        />\n                    }\n                />\n            )\n        }\n\n        const currentMeetingKey = this.props.subcalc.snapshot.meetingKey()\n\n        // loop thought the snapshots, sorting them and splitting them\n        // into meetings and creating a JSX array to return\n        let tabs: Array<JSX.Element> = []\n        let meetingKey = \"\"\n        let meetingIndex = 0\n        let indexOfCurrent = 0\n        let meetingSnapshots: Array<Snapshot> = []\n        const sort = this.state.sortBy === \"name\"\n            ? this.sortBySnapshotName\n            : this.sortBySnapshotRevision\n\n        snapshots.sort(sort).forEach((snapshot) => {\n            if (meetingKey !== snapshot.meetingKey()) {\n                meetingKey = snapshot.meetingKey()\n                if (meetingKey === currentMeetingKey) {\n                    indexOfCurrent = meetingIndex\n                }\n                meetingIndex++\n                if (meetingSnapshots.length > 0) {\n                    tabs.push(this.renderMeeting(meetingSnapshots))\n                }\n                meetingSnapshots = []\n            }\n            meetingSnapshots.push(snapshot)\n        })\n\n        tabs.push(this.renderMeeting(meetingSnapshots))\n\n        return (\n            <div key={`loader-meetings`} className=\"loader-meetings\">\n                <Accordion key={`${this.state.sortBy}`}\n                    activeIndex={indexOfCurrent}\n                >\n                    {tabs}\n                </Accordion>\n            </div>\n        )\n    }\n\n    render() {\n        return (\n            <div className=\"loader\">\n                {this.renderMenu()}\n                <div id=\"meeting-info\">\n                    <div id=\"meeting-name\" className=\"not-button\">\n                        Pick a snapshot below to open it...\n                    </div>\n                </div>\n                <div id=\"loader-container\">\n                    <div id=\"loader-header\">\n                        <Button id=\"loader-name-head\"\n                            label=\"Name\"\n                            icon={this.sortOrderIcon(\"name\")}\n                            onClick={() => this.toggleSortOrder()}\n                        />\n                        <Button id=\"loader-timestamp-head\"\n                            label=\"Last Revised\"\n                            iconPos=\"right\"\n                            icon={this.sortOrderIcon(\"date\")}\n                            onClick={() => this.toggleSortOrder()}\n                        />\n                    </div>\n                    {this.renderMeetings()}\n                    <div id=\"subcaucus-footer\">\n                        <Button id=\"add-loader-button\"\n                            label=\"Add new meeting\"\n                            icon=\"pi pi-calendar-plus\"\n                            onClick={() => this.props.onNew()}\n                        />\n                        <Button id=\"cancel-loader-button\"\n                            label=\"Cancel\"\n                            icon=\"pi pi-times\"\n                            className=\"p-button-secondary\"\n                            onClick={() => this.props.onLoad()}\n                        />\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n","import * as React from 'react'\n// see https://www.primefaces.org/primereact\nimport { Button } from 'primereact/button'\nimport { Card } from 'primereact/card'\nimport { InputText } from 'primereact/inputtext'\n// local to this app\nimport * as _u from './Utilities'\n\ntype KindOfValue = 'text' | 'positive integer'\n\ninterface Props {\n    id?: string\n    title: string\n    description?: string\n    image?: string\n    alt?: string\n    extraButtons?: JSX.Element\n    footer?: JSX.Element\n    type?: KindOfValue\n    value?: string\n    defaultValue?: string\n    allowEmpty?: boolean\n    onSave?: ((value?: string) => void)\n}\ninterface State {\n    value: string\n}\n\nexport class ValueCard extends React.Component<Props, State> {\n\n    isPositiveInteger = false\n\n    constructor(props: Props) {\n        super(props)\n        this.isPositiveInteger = this.props.type === 'positive integer'\n        let initialValue = _u.unwrapString(this.props.value)\n        if (!this.props.allowEmpty && this.isEmpty(initialValue)) {\n            initialValue = _u.unwrapString(this.props.defaultValue)\n        }\n        this.state = {\n            value: initialValue,\n        }\n    }\n\n    originalValue = (): string => {\n        return _u.unwrapString(this.props.value)\n    }\n\n    defaultValue = (): string => {\n        return _u.unwrapString(this.props.defaultValue)\n    }\n\n    handleChange = () => (event: React.FormEvent<HTMLInputElement>) => {\n        _u.debug(\"change\", event.currentTarget.value)\n        if (this.isPositiveInteger) {\n            var num = Number(event.currentTarget.value)\n            if (num < 0) {\n                num = 0\n            }\n            this.setState({ value: String(num) })\n        } else {\n            this.setState({ value: event.currentTarget.value })\n        }\n    }\n\n    handleKey = () => (event: React.KeyboardEvent<HTMLInputElement>) => {\n        if (event.key === 'Enter') {\n            if (this.props.onSave) {\n                this.props.onSave(this.state.value.trim())\n            }\n        }\n    }\n\n    focusOnWholeText = () => (event: React.FormEvent<HTMLInputElement>) => {\n        // event properties must be copied to use async\n        const target = event.currentTarget\n        // do this async to try to make Safari behave\n        setTimeout(() => target.setSelectionRange(0, 9999), 0)\n    }\n\n    isEmpty = (value?: string): boolean => {\n        var empty = (value === '') || (value === undefined)\n        if (this.isPositiveInteger) {\n            empty = (empty || value === '0')\n        }\n        return empty\n    }\n\n    save = (value?: string) => (event: React.MouseEvent<HTMLButtonElement>) => {\n        if (this.props.onSave) {\n            if (value === undefined) {\n                this.props.onSave()\n            } else if (this.isEmpty(value) && !this.props.allowEmpty) {\n                if (!this.isEmpty(this.props.defaultValue)) {\n                    this.props.onSave(this.props.defaultValue)\n                }\n            } else {\n                this.props.onSave(value.trim())\n            }\n        }\n    }\n\n    idPlus = (suffix: string): string | undefined => {\n        return this.props.id ? `${this.props.id}-${suffix}` : undefined\n    }\n\n    render() {\n\n        const { value } = this.state\n        const isPositiveInteger = this.isPositiveInteger\n\n        let cardFooter = <></>\n\n        if (this.props.footer == undefined) {\n            const illegallyEmpty = (this.isEmpty(value) && this.isEmpty(this.defaultValue()) && this.props.allowEmpty === false)\n            const originalIllegallyEmpty = (this.isEmpty(this.originalValue()) && this.props.allowEmpty === false)\n\n            // don't show a save button at all if there is no save function\n            // and if there is no value property, then call the save button \"close\" instead\n            const saveButton = (this.props.onSave\n                ? ((this.props.value != undefined)\n                    ? <Button id={this.idPlus(\"save-button\")}\n                        label=\"Save\"\n                        icon=\"pi pi-check\"\n                        disabled={illegallyEmpty}\n                        onClick={this.save(_u.unwrapString(value, this.defaultValue()))}\n                    />\n                    : <Button id={this.idPlus(\"close-button\")}\n                        label=\"Close\"\n                        icon=\"pi pi-times\"\n                        onClick={this.save()}\n                    />\n                )\n                : <></>\n            )\n\n            const cancelButton = originalIllegallyEmpty || this.props.value === undefined\n                ? ''\n                : <Button id={this.idPlus(\"cancel-button\")}\n                    label=\"Cancel\"\n                    icon=\"pi pi-times\"\n                    className=\"p-button-secondary\"\n                    onClick={this.save()}\n                />\n\n            cardFooter = <>{saveButton}{this.props.extraButtons}{cancelButton}</>\n        } else {\n            cardFooter = this.props.footer\n        }\n\n        return (\n            <div className=\"valuecard-wrapper\">\n                <div className=\"background-blocker\">\n                </div>\n                <Card id={this.idPlus(\"valuecard\")}\n                    className={`valuecard ${this.idPlus(\"valuecard\")}`}\n                    title={this.props.title}\n                    header={this.props.image\n                        ? <div id={this.idPlus(\"picture-container\")}\n                            className=\"picture-container\"\n                        >\n                            <img\n                                alt={`${this.props.alt}`}\n                                src={`${this.props.image}`}\n                            />\n                            {this.props.onSave\n                                ? <></>\n                                : <Button\n                                    id={this.idPlus(\"picture-close-button\")}\n                                    icon=\"pi pi-times\"\n                                    onClick={this.save()}\n                                />\n                            }\n                        </div>\n                        : undefined\n                    }\n                    footer={cardFooter}\n                >\n                    {this.props.children\n                        ? <div id={this.idPlus(\"valuecard-children\")} className=\"valuecard-children\">\n                            {this.props.children}\n                        </div>\n                        : ''}\n                    {this.props.description\n                        ? <div id={this.idPlus(\"valuecard-description\")} className=\"valuecard-description\">\n                            <p>{this.props.description}</p>\n                        </div>\n                        : ''}\n                    {this.props.value != undefined\n                        ? <InputText id={this.idPlus(\"card-field\")}\n                            className={isPositiveInteger ? \"number\" : \"text\"}\n                            autoComplete=\"off\"\n                            keyfilter={isPositiveInteger ? \"pint\" : \"\"}\n                            type=\"text\"\n                            pattern={isPositiveInteger ? \"\\\\d*\" : undefined}\n                            value={isPositiveInteger ? (value === '0' ? '' : value) : value} // show 0 as blank for positive integers\n                            placeholder={this.props.defaultValue}\n                            onChange={this.handleChange()}\n                            // onFocus={this.isPositiveInt ? this.focusOnWholeText() : undefined}\n                            onKeyUp={this.handleKey()}\n                            autoFocus\n                        />\n                        : ''\n                    }\n                </Card>\n            </div>\n        )\n    }\n}\n","import * as React from 'react'\n\n// see https://www.primefaces.org/primereact\nimport { Button } from 'primereact/button'\n\n// local to this app\nimport * as _u from './Utilities'\nimport { Subcaucus } from './Subcaucus'\nimport { ValueCard } from './ValueCard'\n\ninterface Props {\n\tsubcaucus: Subcaucus\n\tdismiss: (() => void)\n}\n\ninterface State { }\n\n/**\n * Component to show a subcaucus row info cards.\n */\nexport class SubcaucusRowInfoCard extends React.Component<Props, State> {\n\n\tconstructor(props: Props) {\n\t\tsuper(props)\n\t\tthis.state = {}\n\t}\n\n\trender() {\n\t\t_u.debug(\"render info card\", this.props.subcaucus.id)\n\n\t\tconst { subcaucus: s, dismiss } = this.props\n\n\t\treturn (\n\t\t\t<ValueCard\n\t\t\t\ttitle={s.displayName()}\n\t\t\t\tfooter={\n\t\t\t\t\t<Button\n\t\t\t\t\t\tlabel=\"OK\"\n\t\t\t\t\t\tonClick={dismiss}\n\t\t\t\t\t/>\n\t\t\t\t}\n\t\t\t>\n\t\t\t\t{s.delegates\n\t\t\t\t\t? <p>The <strong>{s.count.singularPlural(\"member\", \"members\")}</strong> of this subcaucus may elect <strong>{s.delegates.singularPlural(\"delegate\", \"delegates\")}</strong>.</p>\n\t\t\t\t\t: <p>This subcaucus did not attract enough members to be viable. It may not elect any delegates. Members of this subcaucus should consider joining other subcaucuses in order to have some say in the delegates elected.</p>\n\t\t\t\t}\n\t\t\t\t<p>{s.remainder === 0 ? '' : <span>This subcaucus had a remainder of <strong>{s.remainder.decimalPlaces(3)}</strong>. </span>}\n\t\t\t\t\t{s.delegates > s.baseDelegates ? <span>It was awarded a <strong>remainder delegate</strong> because it had one of the higher remainders. </span> : ''}\n\t\t\t\t\t{s.tosses().map((toss) => {\n\t\t\t\t\t\treturn <span>It {toss.won ? \"won\" : \"lost\"} a coin toss against {toss.against.displayName()}. </span>\n\t\t\t\t\t})}\n\t\t\t\t</p>\n\t\t\t</ValueCard>\n\t\t)\n\t}\n}\n","import * as React from 'react'\n// see https://www.primefaces.org/primereact\nimport { Button } from 'primereact/button'\nimport { InputText } from 'primereact/inputtext'\nimport { InputTextarea } from 'primereact/inputtextarea'\n// local to this app\nimport * as _u from './Utilities'\nimport { Subcaucus } from './Subcaucus'\nimport { SubcaucusRowInfoCard } from './SubcaucusRowInfoCard'\n\nexport type SubcaucusRowAction = 'recalc' | 'enter' | 'remove'\n\ninterface Props {\n\tsubcaucus: Subcaucus\n\tindex: number\n\trows: number\n\texchange: ((subcaucus: Subcaucus, action: SubcaucusRowAction, index?: number, callback?: () => void) => void)\n}\n\ninterface State {\n\tname: string\n\tcount: number\n\tdelegates: number\n\tshowInfo: boolean\n}\n\n/**\n * Component to show a single subcaucus row.\n * Also controls subcaucus row info cards.\n */\nexport class SubcaucusRow extends React.Component<Props, State> {\n\n\tconstructor(props: Props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tname: this.props.subcaucus.name,\n\t\t\tcount: this.props.subcaucus.count,\n\t\t\tdelegates: this.props.subcaucus.delegates,\n\t\t\tshowInfo: false\n\t\t}\n\t}\n\n\thandleName = () => (event: React.FormEvent<HTMLTextAreaElement>) => {\n\t\tvar value = event.currentTarget.value\n\t\tif (value.slice(-1) === \"\\n\") {\n\t\t\t_u.debug(\"index\", this.props.index, \"captured newline\")\n\t\t\t// this.props.exchange(this.props.subcaucus, 'enter', this.props.index)\n\t\t\treturn\n\t\t}\n\t\tthis.props.subcaucus.name = value\n\t\tthis.setState({ name: value })\n\t\tthis.props.exchange(this.props.subcaucus, 'recalc')\n\t}\n\n\thandleCount = () => (event: React.FormEvent<HTMLInputElement>) => {\n\t\tvar num = Number(event.currentTarget.value)\n\t\tif (num < 0) {\n\t\t\tnum = 0\n\t\t}\n\t\tthis.setState({ count: num })\n\t}\n\n\thandleCountBlur = () => (event: React.FormEvent<HTMLInputElement>) => {\n\t\tif (this.props.subcaucus.count != this.state.count) {\n\t\t\tthis.props.subcaucus.count = this.state.count\n\t\t\tthis.props.exchange(this.props.subcaucus, 'recalc')\n\t\t}\n\t}\n\n\thandleKey = () => (event: React.KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n\t\tconst { rows, subcaucus } = this.props\n\t\tconst currentTabIndex = event.currentTarget.tabIndex\n\t\t_u.debug(\"index\", currentTabIndex, \"key\", event.key)\n\t\tif (event.key === 'Enter') {\n\t\t\t// enters will not normally select the next row\n\t\t\t// so we have to force it with a callback that happens after the add subcaucus\n\t\t\tthis.props.exchange(subcaucus, 'enter', currentTabIndex, () => {\n\t\t\t\t// if we are in the last position of the count column,\n\t\t\t\t// then the next position after adding a subcaucus will be 2 ahead\n\t\t\t\tconst next = currentTabIndex == rows * 2 ? 2 : 1\n\t\t\t\t// walk through all the subcaucus fields looking for the next one\n\t\t\t\tdocument.querySelectorAll(\".subcaucus-field\").forEach((e) => {\n\t\t\t\t\tconst element = e as HTMLElement\n\t\t\t\t\tif (element.tabIndex === currentTabIndex + next) {\n\t\t\t\t\t\t// then force the focus to this field\n\t\t\t\t\t\telement.focus()\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t})\n\t\t} else if (event.key === 'Tab') {\n\t\t\t// tabs will behave properly, moving to the next row even after adding a subcaucus\n\t\t\tthis.props.exchange(this.props.subcaucus, 'enter', currentTabIndex)\n\t\t}\n\t}\n\n\tfocusOnWholeText = () => (event: React.FormEvent<HTMLInputElement>) => {\n\t\t// event properties must be copied to use async\n\t\tconst target = event.currentTarget\n\t\t// do this async to try to make Safari behave\n\t\tsetTimeout(() => target.setSelectionRange(0, 9999), 0)\n\t}\n\n\tidPlus = (suffix: string): string | undefined => {\n\t\treturn `subcaucus-${this.props.subcaucus.id}-${suffix}`\n\t}\n\n\trender() {\n\t\tconst { subcaucus: s } = this.props\n\n\t\t_u.debug(\"render row\", s.id, this.state)\n\n\t\tconst { name, count, delegates, showInfo } = this.state\n\n\t\tconst infoCard = showInfo\n\t\t\t? <SubcaucusRowInfoCard\n\t\t\t\tsubcaucus={s}\n\t\t\t\tdismiss={() => this.setState({ showInfo: false })}\n\t\t\t/>\n\t\t\t: ''\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<div id={this.idPlus(\"row\")}\n\t\t\t\t\tclassName={`subcaucus-row ${delegates > 0 ? \"has-delegates\" : (count > 0 ? \"no-delegates\" : \"\")}`}\n\t\t\t\t>\n\t\t\t\t\t{_u.isDebugging ? <div className=\"subcaucus-id\">{s.id}</div> : ''}\n\t\t\t\t\t<InputTextarea id={this.idPlus(\"row-name\")}\n\t\t\t\t\t\tclassName=\"subcaucus-field subcaucus-name\"\n\t\t\t\t\t\tautoComplete=\"off\"\n\t\t\t\t\t\ttabIndex={this.props.index}\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\trows={1}\n\t\t\t\t\t\tcols={1}\n\t\t\t\t\t\t// PrimeReact has a bug with the InputTextarea placeholder\n\t\t\t\t\t\t// for now, it will not update this placeholder\n\t\t\t\t\t\t// see: https://github.com/primefaces/primereact/issues/747\n\t\t\t\t\t\tplaceholder={s.defaultName()}\n\t\t\t\t\t\tonChange={this.handleName()}\n\t\t\t\t\t\tonKeyDown={this.handleKey()}\n\t\t\t\t\t/>\n\t\t\t\t\t<InputText id={this.idPlus(\"row-count\")}\n\t\t\t\t\t\tclassName=\"subcaucus-field subcaucus-count\"\n\t\t\t\t\t\tautoComplete=\"off\"\n\t\t\t\t\t\ttabIndex={this.props.index + this.props.rows}\n\t\t\t\t\t\tkeyfilter=\"pint\"\n\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\tpattern=\"\\d*\"\n\t\t\t\t\t\tvalue={count ? count : ''}\n\t\t\t\t\t\tplaceholder={`—`}\n\t\t\t\t\t\tonChange={this.handleCount()}\n\t\t\t\t\t\tonBlur={this.handleCountBlur()}\n\t\t\t\t\t\t// forcing the selction of the whole text seems to lead to problems\n\t\t\t\t\t\t// see https://grand.clst.org:3000/tenseg/subcalc-pr/issues/3\n\t\t\t\t\t\t// onFocus={this.focusOnWholeText()}\n\t\t\t\t\t\tonKeyDown={this.handleKey()}\n\t\t\t\t\t/>\n\t\t\t\t\t<Button id={this.idPlus(\"row-delegates\")}\n\t\t\t\t\t\tclassName={`subcaucus-delegates-button ${delegates > 0 ? \"p-button-success\" : \"p-button-secondary\"}`}\n\t\t\t\t\t\tlabel={delegates ? `${delegates}` : undefined}\n\t\t\t\t\t\ticon={delegates ? undefined : (count ? 'pi pi-ban' : 'pi')}\n\t\t\t\t\t\tonClick={() => this.setState({ showInfo: true })}\n\t\t\t\t\t\tdisabled={count === 0}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div className={\n\t\t\t\t\t\t\ts.reportTosses\n\t\t\t\t\t\t\t\t? s.delegates > s.baseDelegates\n\t\t\t\t\t\t\t\t\t? \"coin won\"\n\t\t\t\t\t\t\t\t\t: \"coin lost\"\n\t\t\t\t\t\t\t\t: \"coin\"\n\t\t\t\t\t\t}></div>\n\t\t\t\t\t</Button>\n\t\t\t\t</div>\n\t\t\t\t{infoCard}\n\t\t\t</>\n\t\t)\n\t}\n}\n","import * as React from 'react'\n\n// see https://www.primefaces.org/primereact\nimport { Button } from 'primereact/button'\nimport { Menubar } from 'primereact/menubar'\nimport { Growl } from 'primereact/growl'\nimport 'primereact/resources/primereact.min.css'\nimport 'primereact/resources/themes/nova-light/theme.css'\nimport 'primeicons/primeicons.css'\n\n// local to this app\nimport './App.scss'\nimport * as _u from './Utilities'\nimport { SubCalc } from './SubCalc'\nimport { Snapshot } from './Snapshot'\nimport { Subcaucus } from './Subcaucus'\nimport { SubcaucusRow, SubcaucusRowAction } from './SubcaucusRow'\nimport { ValueCard } from './ValueCard'\nimport { Loader } from './Loader'\nimport { ShowJSON } from './ShowJSON'\n\n/**\n * Facilitates sorting up or down (or not at all), as needed.\n */\nenum SortOrder {\n    Descending = -1,\n    None = 0,\n    Ascending = 1,\n}\n\n/**\n * Includes the modal cards we can display.\n * When more than one card is waiting to be viewed,\n * they will be presented in the order listed in\n * this enumerator.\n * \n * NOTE: If you add a value you must also add a case\n * to the `renderNextCard()` method for the card to\n * ever be seen.\n */\nenum CardFor {\n    WelcomeAndSetName,\n    ChangingName,\n    ChangingDelegates,\n    ChangingCoin,\n    SavingSnapshot,\n    SavingSnapshotBefore,\n    RemovingEmpties,\n    ShowingAbout,\n    ShowingBy,\n    ShowingInstructions,\n    ShowingSecurity,\n}\n\nenum Presenting {\n    Calculator,\n    Loading,\n}\n\n/**\n * Details that our calculations need to share out\n * to the user.\n */\ninterface SummaryInfo {\n    count: number\n    delegates: number\n    viability: number\n    revisedViability: number\n    minimumCountForViability: number\n    nonViableCount: number\n}\n\ninterface Props { }\n\n/**\n * React state for the SubCalc App.\n */\ninterface State {\n    // modal interactions\n    cards: Array<CardFor>\n    afterBefore?: () => void\n    present: Presenting\n    // sorting info\n    sortName: SortOrder\n    sortCount: SortOrder\n}\n\nexport class App extends React.Component<Props, State> {\n\n    /**\n     * An instance of `SubCalc` that we use to\n     * read and write data from and to local storage.\n     */\n    private subcalc = new SubCalc()\n\n    /**\n     * To be included with component key whenever you want\n     * to be sure that component will _not_ be reused\n     * when the App refreshes with a new snapshot.\n     */\n    private keySuffix = String(Math.random())\n\n    /**\n     * This set of cards is to be presented whenever\n     * the user loads a new meeting. It forces them to\n     * create a meeting name and disclose the number of\n     * delegates to be allowed from this meeting.\n     */\n    initialCardState: Array<CardFor> = [\n        CardFor.WelcomeAndSetName,\n        CardFor.ChangingDelegates,\n        // CardFor.ShowingInstructions\n    ]\n\n    /**\n     * A reference to the  PrimeReact growl notifier \n     * used to share alerts with the user. This reference\n     * is set during the `render()` stage.\n     */\n    growl: Growl | null = null\n\n    /**\n     * Creates the new SubCalc App.\n     */\n    constructor(props: Props) {\n        super(props)\n\n        _u.setAlertFunction(this.growlAlert)\n\n        this.subcalc.snapshot.redistributeDelegates()\n\n        this.state = {\n            // card status\n            cards: this.subcalc.snapshot.allowed ? [] : this.initialCardState,\n            present: Presenting.Calculator,\n            // sorting info\n            sortName: SortOrder.None,\n            sortCount: SortOrder.None,\n        }\n    }\n\n    /**\n     * Either load the snapshot or return to the calculator.\n     * This is used as a callback from the loading component.\n     */\n    loadSnapshot = (snapshot?: Snapshot) => {\n        if (snapshot) {\n            this.subcalc.setSnapshot(snapshot)\n            this.subcalc.snapshot.redistributeDelegates()\n        }\n        this.setState({ present: Presenting.Calculator })\n    }\n\n    /**\n     * Change the meeting name here and in storage.\n     * \n     * NOTE: This is _not_ considered a revision of the snapshot\n     * since the meeting name will apply to all snapshots from this meeting.\n     */\n    setStateName = (name: string) => {\n        this.subcalc.renameMeeting(name)\n        this.forceUpdate()\n    }\n\n    /**\n     * Change the number of delegates allowed here and in storage.\n     */\n    setStateAllowed = (allowed: number) => {\n        this.subcalc.reviseSnapshot({ allowed: allowed })\n        this.forceUpdate()\n    }\n\n    /**\n     * Change the random seed (the \"coin\") here and in storage.\n     */\n    setStateSeed = (seed: number) => {\n        this.subcalc.reviseSnapshot({ seed: seed })\n        this.forceUpdate()\n    }\n\n    /**\n     * Change force and update of the interface and storage\n     * due to changes in the subcaucuses.\n     */\n    setStateSubcaucuses = () => {\n        this.subcalc.reviseSnapshot()\n        this.forceUpdate()\n    }\n\n    /**\n     * Request a new meeting from the storage manager and\n     * set our state to reflect the new meeting.\n     */\n    newMeeting = () => {\n        this.subcalc.newSnapshot()\n        this.setState({ cards: this.initialCardState })\n    }\n\n    /**\n     * Request a new meeting from the storage manager and\n     * set our state to reflect the new meeting.\n     */\n    duplicateMeeting = () => {\n        this.subcalc.duplicateSnapshot()\n        this.growlAlert(this.subcalc.snapshot.name, 'success', 'Snapshot Duplicated')\n        this.forceUpdate()\n    }\n\n    /**\n     * Request a new meeting from the storage manager and\n     * set our state to reflect the new meeting.\n     */\n    saveSnapshot = (revision: string) => {\n        this.subcalc.saveSnapshot(revision)\n        this.forceUpdate()\n        this.growlAlert(revision, 'success', 'Snapshot Saved')\n    }\n\n    /**\n     * Provide a default name for this meeting, including today's date.\n     */\n    defaultName = (): string => {\n        return \"Meeting on \" + this.subcalc.snapshot.created.toDate().toLocaleDateString(\"en-US\")\n    }\n\n    /**\n     * Provide a friendly string explaining the `allowed` number.\n     */\n    allowedString = (): string => {\n        return `${this.subcalc.snapshot.allowed} delegates to be elected`\n    }\n\n    /**\n     * Add a card to an array of cards (or to the current state cards\n     * if no array is provided). Note that we do not need to deduplicate\n     * this array since our `removeCard()` method will remove all copies\n     * of the same card anyway.\n     */\n    addCard = (cardFor: CardFor, to?: Array<CardFor>): Array<CardFor> => {\n        if (to === undefined) {\n            to = this.state.cards\n        }\n        return [...to, cardFor]\n    }\n\n    /**\n     * Adds a card to the cards state.\n     */\n    addCardState = (cardFor: CardFor) => {\n        this.setState({ cards: this.addCard(cardFor) })\n    }\n\n    /**\n     * Remove all copies of the given card from the array of cards\n     * (or from the current state cards if not array is provided).\n     */\n    removeCard = (seekingCardFor: CardFor, from?: Array<CardFor>): Array<CardFor> => {\n        if (from === undefined) {\n            from = this.state.cards\n        }\n        return from.filter(foundCardFor => foundCardFor != seekingCardFor)\n    }\n\n    /**\n     * Removes a card from the cards state.\n     */\n    removeCardState = (cardFor: CardFor) => {\n        this.setState({ cards: this.removeCard(cardFor) })\n    }\n\n    /**\n     * Swaps a card in for another card in the cards state.\n     * This can be used to make one card invoke another card.\n     */\n    switchCardState = (fromCardFor: CardFor, toCardFor: CardFor) => {\n        let newCards = this.removeCard(fromCardFor)\n        newCards = this.addCard(toCardFor, newCards)\n        this.setState({ cards: newCards })\n    }\n\n    /**\n     * Returns `true` if the given card is in the cards state.\n     * \n     * NOTE: The card may be one of many waiting to be displayed,\n     * so this may return `true` even when the card is not visible.\n     */\n    showingCard = (cardFor: CardFor): boolean => {\n        return this.state.cards.indexOf(cardFor) > -1\n    }\n\n    /**\n     * Handles changes to the `allowed` and `name` state, but \n     * nothing else. Expects to be called from an input form element.\n     */\n    handleChange = (name: string) => (event: React.FormEvent<HTMLInputElement>) => {\n        switch (name) {\n            case 'allowed':\n                var allowed = Number(event.currentTarget.value)\n                if (allowed < 0) {\n                    allowed = 0\n                }\n                this.setStateAllowed(allowed)\n                break\n            case 'name':\n                this.setStateName(event.currentTarget.value)\n                break\n        }\n    }\n\n    /**\n     * Intended to facilitate focussing on the full text, even on iOS.\n     * However, this was proving problematic and is not currently in use.\n     */\n    focusOnWholeText = () => (event: React.FormEvent<HTMLInputElement>) => {\n        const target = event.currentTarget // event properties must be copied to use async\n        setTimeout(() => target.setSelectionRange(0, 9999), 0) // do this async to try to make Safari behave\n    }\n\n    /**\n     * Used by the `SubcaucusRow` via a callback to update the \n     * subcaucus array here in the app. \n     */\n    handleSubcaucusChange = (subcaucus: Subcaucus, action: SubcaucusRowAction, index?: number, callback?: () => void) => {\n        _u.debug(\"subcaucus changed\", subcaucus.id, action)\n        switch (action) {\n            case 'remove':\n                this.subcalc.snapshot.subcaucuses.filter((subcaucus, key) => {\n                    return key != subcaucus.id\n                })\n                this.setStateSubcaucuses()\n                return\n            case 'enter':\n                if (index) {\n                    _u.debug(\"enter index\", index, \"length\", this.subcalc.snapshot.subcaucuses.length)\n                    if (index === this.subcalc.snapshot.subcaucuses.length\n                        || index === this.subcalc.snapshot.subcaucuses.length * 2) {\n                        const next = index > this.subcalc.snapshot.subcaucuses.length\n                            ? index + 2\n                            : index + 1\n                        this.subcalc.snapshot.addSubcaucus()\n                        this.forceUpdate(callback)\n                    } else {\n                        if (callback) {\n                            callback()\n                        }\n                    }\n                }\n                return\n            case 'recalc':\n                // this is a signal to recalculate\n                this.setStateSubcaucuses()\n                return\n        }\n    }\n\n    /**\n     * Removes all empty subcaucuses or just those that are not named.\n     */\n    removeEmpties = (subset: 'all' | 'unnamed' = 'all') => {\n        if (subset == 'all') {\n            this.subcalc.snapshot.subcaucuses.filter((subcaucus, key) => {\n                return subcaucus.count > 0\n            })\n            this.subcalc.reviseSnapshot()\n        }\n        if (subset == 'unnamed') {\n            this.subcalc.snapshot.subcaucuses.filter((subcaucus, k, i) => {\n                _u.debug(\"remove?\", subcaucus.id, subcaucus.count, subcaucus.name, subcaucus.count > 0 || subcaucus.name != '', \"key\", k, \"index\", i)\n                return subcaucus.count > 0 || subcaucus.name != ''\n            })\n        }\n        this.removeCardState(CardFor.RemovingEmpties)\n        this.subcalc.reviseSnapshot()\n    }\n\n    /**\n     * Returns an icon to represent the supplied `SortOrder`.\n     */\n    sortOrderIcon = (order: SortOrder): string => {\n        return [\"pi pi-chevron-circle-down\", \"pi pi-circle-off\", \"pi pi-chevron-circle-up\"][order + 1]\n    }\n\n    /**\n     * Cycles through the sort orders and returns the next one.\n     */\n    nextSortOrder = (currentOrder: SortOrder, direction = 1): SortOrder => {\n        // shifting over with +1 to nudge values over to where modulo is happy\n        let nextOrder = ((currentOrder + direction + 1) % 3)\n        if (nextOrder < 0) {\n            nextOrder += 3 // needed to cycle backwards\n        }\n        // shift back over -1 to align with our sort orders again\n        return nextOrder - 1\n    }\n\n    /**\n     * Returns JSX for the menubar.\n     * \n     * NOTE: Do not `setState()` in this method.\n     */\n    renderMenu = (): JSX.Element => {\n        const items = [\n            {\n                label: \"About\",\n                icon: \"pi pi-fw pi-info-circle\",\n                items: [\n                    {\n                        label: \"Minnesota DFL Subcaucus Calculator\",\n                        command: () => this.addCardState(CardFor.ShowingAbout),\n                    },\n                    {\n                        label: \"Instructions\",\n                        command: () => this.addCardState(CardFor.ShowingInstructions),\n                    },\n                    {\n                        label: \"Data Security\",\n                        command: () => this.addCardState(CardFor.ShowingSecurity),\n                    },\n                ]\n            },\n            {\n                label: \"Meetings\",\n                icon: \"pi pi-fw pi-calendar\",\n                items: [\n                    {\n                        label: \"New meeting\",\n                        icon: \"pi pi-fw pi-calendar-plus\",\n                        command: () => {\n                            if (this.subcalc.snapshot.revision == \"\") {\n                                this.setState({ afterBefore: () => this.newMeeting() })\n                                this.addCardState(CardFor.SavingSnapshotBefore)\n                            } else {\n                                this.newMeeting()\n                            }\n                        }\n                    },\n                    {\n                        label: \"Open snapshot\",\n                        icon: \"pi pi-fw pi-folder-open\",\n                        command: () => {\n                            if (this.subcalc.snapshot.revision == \"\") {\n                                this.setState({ afterBefore: () => this.setState({ present: Presenting.Loading }) })\n                                this.addCardState(CardFor.SavingSnapshotBefore)\n                            } else {\n                                this.setState({ present: Presenting.Loading })\n                            }\n                        }\n                    },\n                    {\n                        label: \"Save snapshot\",\n                        icon: \"pi pi-fw pi-clock\",\n                        command: () => this.addCardState(CardFor.SavingSnapshot),\n                    },\n                    {\n                        label: \"Duplicate meeting\",\n                        icon: \"pi pi-fw pi-clone\",\n                        command: () => {\n                            if (this.subcalc.snapshot.revision == \"\") {\n                                this.setState({ afterBefore: () => this.duplicateMeeting() })\n                                this.addCardState(CardFor.SavingSnapshotBefore)\n                            } else {\n                                this.duplicateMeeting()\n                            }\n                        }\n                    },\n                    {\n                        label: \"Change the coin\",\n                        icon: \"pi pi-fw pi-refresh\",\n                        command: () => this.addCardState(CardFor.ChangingCoin)\n                    },\n                ]\n            },\n            {\n                label: \"Share\",\n                icon: \"pi pi-fw pi-share-alt\",\n                items: [\n                    {\n                        label: \"Email report\",\n                        icon: \"pi pi-fw pi-envelope\",\n                        command: () => this.growlAlert(\"Email report.\", 'warn', 'TODO')\n                    },\n                    {\n                        label: \"Download text\",\n                        icon: \"pi pi-fw pi-align-left\",\n                        command: () => this.growlAlert(\"Download text.\", 'warn', 'TODO')\n                    },\n                    {\n                        label: \"Download CSV\",\n                        icon: \"pi pi-fw pi-table\",\n                        command: () => this.growlAlert(\"Download csv.\", 'warn', 'TODO')\n                    },\n                    {\n                        label: \"Download code\",\n                        icon: \"pi pi-fw pi-save\",\n                        command: () => this.growlAlert(\"Download code.\", 'warn', 'TODO')\n                    },\n                ]\n            },\n        ]\n        return <Menubar key=\"calculator-menu\" model={items} id=\"app-main-menu\" />\n    }\n\n    /**\n     * Returns JSX for the about card.\n     * \n     * NOTE: Do not `setState()` in this method.\n     */\n    renderAbout = (): JSX.Element => {\n        return (\n            <ValueCard key=\"about-card\" id=\"about-card\"\n                title=\"Minnesota DFL Subcaucus Calculator\"\n                image=\"dfl.jpg\"\n                onSave={() => this.removeCardState(CardFor.ShowingAbout)}\n                extraButtons={\n                    <Button id=\"show-credits-button\"\n                        label=\"Credits\"\n                        icon=\"pi pi-user\"\n                        className=\"p-button-secondary\"\n                        onClick={() => this.switchCardState(CardFor.ShowingAbout, CardFor.ShowingBy)}\n                    />\n                }\n            >\n                <p>Originally written for <a href=\"http://sd64dfl.org\">SD64 DFL</a>, this app assists convenors of precinct caucuses and conventions in Minnesota. The Minnesota Democratic Farmer Labor (DFL) party uses a wonderful, but bit arcane, “walking subcaucus” process that is simple enough to do, but rather difficult to tabulate.</p>\n                <p>Given the number of delegates your meeting or caucus is allowed to send forward and the count of members of each subcaucus, this calculator determines how many of those delegates each subcaucus will elect. The rules it follows appeared on page 4 of the <a href=\"http://www.sd64dfl.org/more/caucus2014printing/2014-Official-Call.pdf\">DFL 2014 Official Call</a>, including the proper treatment of remainders. It makes the math involved in a walking subcaucus disappear.</p>\n                <p>The app could be used to facilitate a “walking subcaucus” or “<a href=\"https://en.wikipedia.org/wiki/Proportional_representation\">proportional representation</a>” system for any group.</p>\n            </ValueCard>\n        )\n    }\n\n    /**\n     * Returns JSX for the instructions card.\n     * \n     * NOTE: Do not `setState()` in this method.\n     */\n    renderInstructions = (): JSX.Element => {\n        return (\n            <ValueCard key=\"instructions-card\" id=\"instructions-card\"\n                title=\"Fill in the subcaucuses\"\n                image=\"walking.jpg\"\n                onSave={() => this.removeCardState(CardFor.ShowingInstructions)}\n            >\n                <p>Now it is time to fill in the subcaucus information. Just add each subcaucus name and the count of participants. Usually a convention or cacucus will solicit the names of subcaucuses first, feel free to enter them right away without a count. Then people will be encouraged to walk around the room and congregate with the subcaucus that most closely represents their views. When each subcacus reports how many members they attracted, you can enter that as the count for that subcaucus.</p>\n                <p>As soon as you start entering subcaucus counts, the calculator will go to work determining how many delegates each subcaucus will be assigned. You can ignore those numbers until you have finished entering and confirming all the subcaucus counts. When you are done, the delegate numbers can be reported to the chair of your convention or caucus.</p>\n                <p>Since most conventions or caucuses will go through more than one round of \"walking\", you can just keep reusing your subcaucus list for each round. However, you might want to consider these steps at the end of each round:</p>\n                <ul>\n                    <li>Use the \"Meetings\" menu at the top to save a snapshot after each round of caucusing. This will give you a good record of the whole process.</li>\n                    <li>Use the \"Share\" menu to email a report about each round to the chair of the meeting just so they also have a clear record of the process.</li>\n                </ul>\n                <p>You can always get these instructions back under the \"About\" menu at the top. Have fun!</p>\n            </ValueCard>\n        )\n    }\n\n    /**\n     * Returns JSX for the security card.\n     * \n     * NOTE: Do not `setState()` in this method.\n     */\n    renderSecurity = (): JSX.Element => {\n        return (\n            <ValueCard key=\"security-card\" id=\"security-card\"\n                title=\"Data security\"\n                image=\"security.jpg\"\n                extraButtons={\n                    <Button id=\"clear-data -button\"\n                        label=\"Clear All Data\"\n                        icon=\"pi pi-exclamation-triangle\"\n                        className=\"p-button-danger\"\n                        onClick={() => this.growlAlert(\"Clear data.\", 'warn', 'TODO')}\n                    />\n                }\n                onSave={() => this.removeCardState(CardFor.ShowingSecurity)}\n            >\n                <p>The subcaucus calculator stores all of the data you enter on your own device. It uses a feature of web browsers called \"local storage\" to save all your meeting information within your web browser. None of your data gets off your device unless you choose to share it.</p>\n                <p>Do note that this app is running on a web server, though, and that server will keep all the logs typical of web servers. This includes logs of your IP address and the documents you retrieve from the server. None of these logs will include your specific meeting information.</p>\n                <p>One thing to be aware of is that anyone using this same browser on this same device will be able to see your meeting information, including saved snapshots and past meetings, when they come to this web site. If this is a public device and you want to clear out all the data the calculator has stored, click the \"Clear All Data\" button.</p>\n                <p>Since the data is stored with your browser on this device, also be aware that you will not be able to see your meeting information from any other browser. This means that even you won't be able to get at this data unless you use the sharing features.</p> {/* TODO: create a transfer data feature */}\n                <p>You can use the \"Share\" menu to get data off your device when you need to do so. Once you share your meeting information this calculator is no longer in control of that data. Make good choices about sharing.</p>\n                <p>The good news is that there really isn't any private information in the calculator in the first place. Most meetings that use the walking subcacus process are public meetings and the data you store in this calculator is not sensitive. Still, we thought you'd like to know we treat it as <em>your</em> data and do not share it unless you ask us to.</p>\n            </ValueCard>\n        )\n    }\n\n    /**\n     * Returns JSX for the byline credit card.\n     * \n     * NOTE: Do not `setState()` in this method.\n     */\n    renderBy = (): JSX.Element => {\n        return (\n            <ValueCard key=\"by-card\" id=\"by-card\"\n                title=\"Brought to you by Tenseg LLC\"\n                image=\"tenseg.jpg\"\n                onSave={() => this.removeCardState(CardFor.ShowingBy)}\n            >\n                <p>We love the walking subcaucus process and it makes us a bit sad that the squirrelly math required to calculate who gets how many delegate discourages meetings and caucuses from using the process. We hope this calculator makes it easier for you to get to know your neighbors as you work together to change the world!</p>\n                <p>Please check us out at <a href=\"https://tenseg.net\">tenseg.net</a> if you need help building a website or making appropriate use of technology.</p>\n            </ValueCard>\n        )\n    }\n\n    /**\n     * Returns JSX for the welcome card, which is a special version\n     * of the card to enter a name for the meeting.\n     * \n     * NOTE: Do not `setState()` in this method.\n     */\n    renderWelcomeAndSetName = (): JSX.Element => {\n        return (\n            <ValueCard key=\"welcome-card\" id=\"welcome-card\"\n                title=\"Welcome to the Minnesota DFL Subcacus Calculator\"\n                image=\"dfl.jpg\"\n                description='Please start by specifying the name of your meeting here. Most meetings have a name, like the \"Ward 4 Precinct 7 Caucus\" or the \"Saint Paul City Convention\".'\n                value={this.subcalc.snapshot.name}\n                defaultValue={this.defaultName()}\n                allowEmpty={false}\n                onSave={(value?: string) => {\n                    if (value == undefined) {\n                        this.removeCardState(CardFor.WelcomeAndSetName)\n                    } else {\n                        this.setState({ cards: this.removeCard(CardFor.WelcomeAndSetName) })\n                        this.setStateName(value)\n                    }\n                }}\n            />\n        )\n    }\n\n    /**\n     * Returns JSX for the card to change a meeting's name.\n     * \n     * NOTE: Do not `setState()` in this method.\n     */\n    renderChangingName = (): JSX.Element => {\n        return (\n            <ValueCard key=\"name-value\" id=\"name-value\"\n                title=\"Meeting name?\"\n                value={this.subcalc.snapshot.name}\n                defaultValue={this.defaultName()}\n                allowEmpty={false}\n                extraButtons={this.subcalc.snapshot.name\n                    ? <Button id=\"new-meeting-button\"\n                        label=\"New meeting\"\n                        icon=\"pi pi-calendar-plus\"\n                        className=\"p-button-secondary\"\n                        onClick={() => this.growlAlert(\"New meeting.\", 'warn', 'TODO')}\n                    />\n                    : <></>\n                }\n                onSave={(value?: string) => {\n                    if (value == undefined) {\n                        this.removeCardState(CardFor.ChangingName)\n                    } else {\n                        this.setState({ cards: this.removeCard(CardFor.ChangingName) })\n                        this.setStateName(value)\n                    }\n                }}\n            >\n                <p>You can save a new name for this meeting or, if this is really a new event, you may want to start a new meeting altogether.</p>\n            </ValueCard>\n        )\n    }\n\n    /**\n     * Returns JSX for the card to save a \n     * snapshot of the current state of the\n     * calculator.\n     * \n     * NOTE: Do not `setState()` in this method.\n     */\n    renderSavingSnapshot = (): JSX.Element => {\n        return (\n            <ValueCard key=\"snapshot-value\" id=\"snapshot-value\"\n                title=\"Name for the snapshot?\"\n                value=\"\"\n                defaultValue={`Revision of ${this.subcalc.snapshot.name}`}\n                allowEmpty={false}\n                extraButtons={\n                    <Button id=\"cancel-save-snapshot-button\"\n                        label=\"Cancel\"\n                        icon=\"pi pi-times\"\n                        className=\"p-button-secondary\"\n                        onClick={() => this.removeCardState(CardFor.SavingSnapshot)}\n                    />\n                }\n                onSave={(value?: string) => {\n                    this.removeCardState(CardFor.SavingSnapshot)\n                    if (value) {\n                        this.saveSnapshot(value)\n                    }\n                }}\n            >\n                <p>Consider names like \"First walk\" or \"Final result\".\n                {this.subcalc.snapshot.allowed\n                        ? <span> If this is actually a new event, you may want to start a new meeting instead</span>\n                        : <></>\n                    }\n                </p>\n            </ValueCard>\n        )\n    }\n\n    /**\n     * Returns JSX for the card to save a \n     * snapshot of the current state of the\n     * calculator before loading another snapshot.\n     * \n     * NOTE: Do not `setState()` in this method.\n     */\n    renderSavingSnapshotBefore = (): JSX.Element => {\n        return (\n            <ValueCard key=\"snapshot-value\" id=\"snapshot-value\"\n                title=\"Save changes?\"\n                value=\"\"\n                defaultValue={`Revision of ${this.subcalc.snapshot.revision || this.subcalc.snapshot.name}`}\n                allowEmpty={false}\n                extraButtons={\n                    <>\n                        <Button id=\"just-load-snapshot-button\"\n                            label=\"Don't save\"\n                            icon=\"pi pi-folder-open\"\n                            className=\"p-button-warning\"\n                            onClick={() => {\n                                this.removeCardState(CardFor.SavingSnapshotBefore)\n                                if (this.state.afterBefore) {\n                                    this.state.afterBefore()\n                                }\n                            }}\n                        />\n                        <Button id=\"cancel-save-and-load-snapshot-button\"\n                            label=\"Cancel\"\n                            icon=\"pi pi-times\"\n                            className=\"p-button-secondary\"\n                            onClick={() => this.removeCardState(CardFor.SavingSnapshotBefore)}\n                        />\n                    </>\n                }\n                onSave={(value?: string) => {\n                    this.removeCardState(CardFor.SavingSnapshotBefore)\n                    if (value) {\n                        this.saveSnapshot(value)\n                        if (this.state.afterBefore) {\n                            this.state.afterBefore()\n                        }\n                    }\n                }}\n            >\n                <p>It looks like you have changed something. Do you want to save a snapshot? If so, provide a name like \"First walk\" or \"Final result\". If you don't save a snapshot your changes may be lost when you open a past snapshot.\n                </p>\n            </ValueCard>\n        )\n    }\n\n    nextStepLoading = () => {\n        this.setState({ present: Presenting.Loading })\n    }\n\n    /**\n     * Returns JSX for the card to change the \n     * number of delegates allowed from a meeting.\n     * \n     * NOTE: Do not `setState()` in this method.\n     */\n    renderChangingDelegates = (): JSX.Element => {\n        return (\n            <ValueCard key=\"delegate-value\" id=\"delegate-value\"\n                title=\"Number of delegates allowed?\"\n                type=\"positive integer\"\n                value={this.subcalc.snapshot.allowed.toString()}\n                allowEmpty={false}\n                extraButtons={this.subcalc.snapshot.allowed\n                    ? <Button id=\"new-meeting-button\"\n                        label=\"New meeting\"\n                        icon=\"pi pi-calendar-plus\"\n                        className=\"p-button-secondary\"\n                        onClick={() => this.growlAlert(\"New meeting.\", 'warn', 'TODO')}\n                    />\n                    : <></>\n                }\n                onSave={(value?: string) => {\n                    if (value == undefined) {\n                        this.removeCardState(CardFor.ChangingDelegates)\n                    } else {\n                        this.setState({ cards: this.removeCard(CardFor.ChangingDelegates) })\n                        this.setStateAllowed(Number(value))\n                    }\n                }}\n            >\n                <p>Specify the number of delegates that your meeting or caucus is allowed to send on to the next level. This is the number of delegates to be elected by your meeting.\n                {this.subcalc.snapshot.allowed\n                        ? <span> If this is actually a new event, you may want to start a new meeting instead</span>\n                        : <></>\n                    }\n                </p>\n            </ValueCard>\n        )\n    }\n\n    /**\n     * Returns JSX for the card to change the \n     * coin (or random seed) of a meeting.\n     * \n     * NOTE: Do not `setState()` in this method.\n     */\n    renderChangingCoin = (): JSX.Element => {\n        return (\n            <ValueCard key=\"coin-value\" id=\"coin-value\"\n                title={\"Change the coin\"}\n                type=\"positive integer\"\n                value={this.subcalc.snapshot.seed.toString()}\n                allowEmpty={false}\n                extraButtons={this.subcalc.snapshot.allowed\n                    ? <Button id=\"random-coin-button\"\n                        label=\"Generate random coin\"\n                        icon=\"pi pi-refresh\"\n                        className=\"p-button-success\"\n                        onClick={() => {\n                            this.subcalc.reviseSnapshot({ seed: _u.randomSeed() })\n                            this.growlAlert(`Random seed is now ${this.subcalc.snapshot.seed}.`, 'success', 'New Random Coin')\n                            this.removeCardState(CardFor.ChangingCoin)\n                        }}\n                    />\n                    : <></>\n                }\n                onSave={(value?: string) => {\n                    if (value == undefined) {\n                        this.removeCardState(CardFor.ChangingCoin)\n                    } else {\n                        const seed = Number(value)\n                        if (seed === this.subcalc.snapshot.seed) {\n                            this.growlAlert(`Random seed is still ${this.subcalc.snapshot.seed}.`, 'info', 'Coin not changed')\n                        } else {\n                            this.subcalc.reviseSnapshot({ seed: seed })\n                            this.growlAlert(`Random seed is now ${this.subcalc.snapshot.seed}.`, 'success', 'New Chosen Coin')\n                        }\n                        this.removeCardState(CardFor.ChangingCoin)\n                    }\n                }}\n            >\n                <p>\n                    Traditionally, when there are delegates remaining to be assigned and\n                    two subcaucuses are \"tied\" with the same size delegations, the chair\n                    of the caucus will use some method of assigning those remaining delegates\n                    at random. These methods include coin-flips or drawing lots.\n                </p>\n                <p>\n                    In this calculator we accomplish the same randomness, but we do so by\n                    in essence, flipping a coin in secret ahead of time. The \"coin\" is\n                    really a \"random seed\" that ensures fair but unpredictable results.\n                </p>\n                <p>\n                    If you change the coin, this pattern of random flips will also change.\n                    If want the same results as someone else is getting in their copy of\n                    the calculator, then you must share the same coin value.\n                </p>\n            </ValueCard>\n        )\n    }\n\n    /**\n     * Returns JSX for the card that allows the user to\n     * back out of removing empty subcaucuses.\n     * \n     * NOTE: Do not `setState()` in this method.\n     */\n    renderRemovingEmpties = (): JSX.Element => {\n        return (\n            <ValueCard key=\"remove-empties-card\" id=\"remove-empties-card\"\n                title=\"Remove empty subcaucuses\"\n                footer={\n                    <>\n                        <Button id=\"remove-all-empties-button\"\n                            label=\"Remove All Empties\"\n                            icon=\"pi pi-trash\"\n                            onClick={() => this.removeEmpties()}\n                        />\n                        <Button id=\"remove-some-empties-button\"\n                            label=\"Remove Only Unnamed\"\n                            icon=\"pi pi-trash\"\n                            className=\"p-button-warning\"\n                            onClick={() => this.removeEmpties('unnamed')}\n                        />\n                        <Button id=\"cancel-remove-button\"\n                            label=\"Cancel\"\n                            icon=\"pi pi-times\"\n                            className=\"p-button-secondary\"\n                            onClick={() => this.removeCardState(CardFor.RemovingEmpties)}\n                        />\n                    </>\n                }\n            >\n                <p>An \"empty\" subcaucus is one with no participants &mdash; a zero count.</p>\n                <p>You can choose to remove all empty subcaucuses, or only those which also have no names.</p>\n            </ValueCard>\n        )\n    }\n\n    /**\n     * Returns JSX next card to be displayed from the cards state.\n     * Returns and empty JSX element if there are no cards waiting.\n     * \n     * This function sorts the cards array so that highest priority\n     * cards are displayed first.\n     * \n     * NOTE: Please be sure to add any new `CardFor` values as \n     * cases in this function. Do not `setState()` in this method.\n     */\n    renderNextCard = (): JSX.Element => {\n        return this.state.cards.sort((a, b) => b - a).reduce((accumulator: JSX.Element, cardFor: CardFor): JSX.Element => {\n            _u.debug(\"filtering cards\", accumulator, cardFor)\n            switch (cardFor) {\n                case CardFor.WelcomeAndSetName: return this.renderWelcomeAndSetName()\n                case CardFor.ShowingInstructions: return this.renderInstructions()\n                case CardFor.ShowingAbout: return this.renderAbout()\n                case CardFor.ShowingBy: return this.renderBy()\n                case CardFor.SavingSnapshotBefore: return this.renderSavingSnapshotBefore()\n                case CardFor.SavingSnapshot: return this.renderSavingSnapshot()\n                case CardFor.ChangingName: return this.renderChangingName()\n                case CardFor.ChangingDelegates: return this.renderChangingDelegates()\n                case CardFor.ChangingCoin: return this.renderChangingCoin()\n                case CardFor.RemovingEmpties: return this.renderRemovingEmpties()\n                case CardFor.ShowingSecurity: return this.renderSecurity()\n            }\n            return accumulator\n        }, <></>)\n    }\n\n    /**\n     * A method to sort subcaucuses by name.\n     * \n     * NOTE: This depends on the `sortName` state to determine\n     * whether the result will be ascending or descending.\n     */\n    sortBySubcaucusName = (a: Subcaucus, b: Subcaucus): number => {\n\n        // fall back to order of entry\n        let comparison = a.id - b.id\n        const nameA = a.displayName().toUpperCase()\n        const nameB = b.displayName().toUpperCase()\n        if (nameA < nameB) {\n            comparison = -1\n        }\n        if (nameA > nameB) {\n            comparison = 1\n        }\n        return comparison * this.state.sortName\n    }\n\n    /**\n     * A method to sort subcaucuses by count.\n     * This method sorts first by count, then subsorts by\n     * the number of delegates, and then sorts by name\n     * (names will always be ascending). It also makes sure\n     * that subcaucuses without any members will sort to\n     * the bottom regardless of the chosen sort order.\n     * \n     * NOTE: This depends on the `sortCount` state to determine\n     * whether the result will be ascending or descending.\n     */\n    sortBySubcaucusCounts = (a: Subcaucus, b: Subcaucus): number => {\n\n        // start with delegates, then check on count, then fall back if needed\n        const delegateComparison = (a.delegates - b.delegates).comparisonValue()\n\n        let ac = a.count ? a.count : this.state.sortCount * Infinity\n        let bc = b.count ? b.count : this.state.sortCount * Infinity\n        const countComparison = (ac - bc).comparisonValue()\n\n\n        const weightedComparison = (0.1 * delegateComparison) + countComparison\n\n        let comparison = weightedComparison\n\n        if (comparison == 0) {\n            // we want the names to always sort in descending order\n            // during count comparisons, so we undo the effect of direction\n            // (both 1 * 1 and -1 * -1 equal 1) and then force a -1 direction \n            comparison = this.sortBySubcaucusName(a, b) * this.state.sortName * -1\n        }\n\n        return comparison * this.state.sortCount\n    }\n\n    /**\n     * Returns JSX for the subcaucus rows.\n     * \n     * NOTE: Do not `setState()` in this method.\n     */\n    renderSubcaucusRows = (): JSX.Element[] => {\n        // sort subcaucuses by id number by default\n        let sort = (a: Subcaucus, b: Subcaucus) => {\n            return a.id - b.id\n        }\n\n        if (this.state.sortName != SortOrder.None) {\n            sort = this.sortBySubcaucusName\n        }\n\n        if (this.state.sortCount != SortOrder.None) {\n            sort = this.sortBySubcaucusCounts\n        }\n\n        return this.subcalc.snapshot.subcaucuses.values().sort(sort).map((subcaucus, index, array): JSX.Element => {\n            return (\n                <SubcaucusRow key={`${this.subcalc.snapshot.snapshotKey()} ${subcaucus.id} ${this.subcalc.snapshot.changes}`}\n                    subcaucus={subcaucus}\n                    index={index + 1}\n                    rows={array.length}\n                    exchange={this.handleSubcaucusChange}\n                />\n            )\n        })\n    }\n\n    /**\n     * Returns JSX for the summary section of the SubCalc App.\n     * \n     * NOTE: Do not `setState()` in this method.\n     */\n    renderSummary = (): JSX.Element => {\n        return ((this.subcalc.snapshot.room > 0)\n            ? <div id=\"summary-container\">\n                <div className=\"summary-row\">\n                    <div className=\"summary-label\">\n                        Total participants and delegates elected\n                    </div>\n                    <div className=\"summary-count\">\n                        <strong>\n                            {this.subcalc.snapshot.room.toCommaString()}\n                        </strong>\n                    </div>\n                    <div className=\"summary-delegates\">\n                        {this.subcalc.snapshot.totalDelegates.toCommaString()}\n                    </div>\n                </div>\n                <div className=\"summary-row\">\n                    <div className=\"summary-label\">\n                        Minimum of <strong>{this.subcalc.snapshot.wholeViability.singularPlural(\"member\", \"members\")}</strong> needed to make a subcaucus viable\n                    </div>\n                </div>\n                <div className=\"summary-row\">\n                    <div className=\"summary-label\">\n                        Viability number\n                    </div>\n                    <div className=\"summary-count\">\n                        <strong>\n                            {this.subcalc.snapshot.viability.decimalPlaces(3)}\n                        </strong>\n                    </div>\n                </div>\n                {this.subcalc.snapshot.viableRoom < this.subcalc.snapshot.room\n                    ? <div className=\"summary-row clickable\"\n                        onClick={() => this.growlAlert(\"Explain viability in more detail.\", 'warn', 'TODO')}\n                    >\n                        <div className=\"summary-label\">\n                            Recalculated viability number ({(this.subcalc.snapshot.room - this.subcalc.snapshot.viableRoom).singularPlural(\"person\", \"people\")} in non-viable subcaucuses)\n                        </div>\n                        <div className=\"summary-count\">\n                            {this.subcalc.snapshot.delegateViability.decimalPlaces(3)}\n                        </div>\n                    </div>\n                    : ''\n                }\n            </div>\n            : <div id=\"summary-container\">\n                <div className=\"summary-row\">\n                    <div className=\"summary-label\">\n                        To get an initial \"viability number\" just make all the people in the room members of a single subcaucus.\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    /**\n     * Returns JSX for the whole calculator.\n     * \n     * NOTE: Do not `setState()` in this method.\n     */\n    renderCalculator = (): JSX.Element => {\n        const { sortName, sortCount } = this.state\n        const snapshot = this.subcalc.snapshot\n        const { name, revision } = snapshot\n\n        return (\n            <div id=\"calculator\">\n                {this.renderMenu()}\n                <div id=\"meeting-info\">\n                    <div id=\"meeting-name\" className=\"button\"\n                        onClick={() => this.addCardState(CardFor.ChangingName)}\n                    >\n                        {name ? name : this.defaultName()}\n                        {revision != ''\n                            ? <span className=\"snapshot\">\n                                {revision}\n                            </span>\n                            : ''\n                        }\n                    </div>\n                    <div id=\"delegates-allowed\" className=\"button\"\n                        onClick={() => this.addCardState(CardFor.ChangingDelegates)}\n                    >{this.allowedString()}</div>\n                </div>\n                <div id=\"subcaucus-container\">\n                    <div id=\"subcaucus-header\">\n                        <Button id=\"subcaucus-name-head\"\n                            label=\"Subcaucuses\"\n                            icon={this.sortOrderIcon(sortName)}\n                            onClick={() => this.setState({\n                                sortName: this.state.sortName ? SortOrder.None : SortOrder.Ascending,\n                                sortCount: SortOrder.None\n                            })}\n                        />\n                        <Button id=\"subcaucus-count-head\"\n                            label=\"Members\"\n                            iconPos=\"right\"\n                            icon={this.sortOrderIcon(sortCount)}\n                            onClick={() => this.setState({\n                                sortName: SortOrder.None,\n                                sortCount: this.nextSortOrder(sortCount, -1)\n                            })}\n                        />\n                        <Button id=\"subcaucus-delegate-head\"\n                            label=\"Dels\"\n                        />\n                    </div>\n                    <div id=\"subcaucus-list\">\n                        {this.renderSubcaucusRows()}\n                    </div>\n                    <div id=\"subcaucus-footer\">\n                        <Button id=\"add-subcaucus-button\"\n                            label=\"Add a Subcaucus\"\n                            icon=\"pi pi-plus\"\n                            onClick={() => {\n                                snapshot.addSubcaucus()\n                                this.setStateSubcaucuses()\n                            }}\n                        />\n                        <Button id=\"remove-empty-subcaucuses-button\"\n                            label=\"Remove Empties\"\n                            icon=\"pi pi-trash\"\n                            onClick={() => this.addCardState(CardFor.RemovingEmpties)}\n                        />\n                        {_u.isDebugging()\n                            ? <Button id=\"random-coin-button\"\n                                icon=\"pi pi-refresh\"\n                                className=\"p-button-success\"\n                                onClick={() => {\n                                    this.subcalc.reviseSnapshot({ seed: _u.randomSeed() })\n                                    this.growlAlert(`Random seed is now ${this.subcalc.snapshot.seed}.`, 'success', 'New Random Coin')\n                                    this.forceUpdate()\n                                }}\n                            />\n                            : ''\n                        }\n                    </div>\n                </div>\n                {this.renderSummary()}\n            </div>\n        )\n    }\n\n    /**\n     * Returns the JSX for the footer elements of the app.\n     * \n     * NOTE: Do not `setState()` in this method.\n     */\n    renderByline = (): JSX.Element => {\n        return (\n            <Button id=\"app-byline\"\n                label=\"Brought to you by Tenseg LLC\"\n                href=\"https://tenseg.net\"\n                onClick={() => this.addCardState(CardFor.ShowingBy)}\n            />\n        )\n    }\n\n    /**\n     * Returns the JSX for debugging elements. These should not be\n     * displayed when compiled for production.\n     * \n     * NOTE: Do not `setState()` in this method.\n     */\n    renderDebuggingInfo = (): JSX.Element => {\n\n        if (!_u.isDebugging()) return <></>\n\n        return (\n            <div key={_u.randomSeed()} className=\"debugging\">\n                <p>This is debugging info for <a href=\"https://grand.clst.org:3000/tenseg/subcalc-pr/issues\" target=\"_repository\">subcalc-pr</a> (with <a href=\"https://reactjs.org/docs/react-component.html\" target=\"_react\">ReactJS</a>, <a href=\"https://www.primefaces.org/primereact/\" target=\"_primereact\">PrimeReact</a>, <a href=\"https://www.primefaces.org/primeng/#/icons\" target=\"_primeicons\">PrimeIcons</a>) derrived from <a href=\"https://bitbucket.org/tenseg/subcalc-js/src\" target=\"_bitbucket\">subcalc-js</a>.\n                </p>\n                <pre>{this.subcalc.snapshot.asText()}</pre>\n                <div className=\"columns\">\n                    <div className=\"column\">\n                        <pre>{\"rendered App \" + (new Date()).toLocaleTimeString()}</pre>\n                        <pre>{\"subcalc: \" + this.subcalc.debug()}</pre>\n                        <ShowJSON name=\"this.state\" data={this.state} /><br />\n                    </div>\n                    <div className=\"column\">\n                        <ShowJSON name=\"this.subcalc\" data={this.subcalc} />\n                    </div>\n                </div>\n                <p style={{ clear: \"both\" }}>Done.</p>\n            </div>\n        )\n    }\n\n    /**\n     * Shows an alert using PrimeReact `Growl` if it is available,\n     * or simply as an alert if there is not growl instance yet.\n     */\n    growlAlert = (message: string, severity: 'error' | 'warn' | 'success' | 'info' = 'error', summary = '') => {\n        if (!summary && message) {\n            summary = message\n            message = ''\n        }\n        if (this.growl) {\n            this.growl.show({\n                severity: severity,\n                summary: summary,\n                closable: false,\n                detail: message\n            });\n        } else {\n            alert(message)\n        }\n    }\n\n    /**\n     * Returns the JSX for the whole SubCalc App.\n     */\n    render() {\n\n        _u.debug(\"rendering\", this.subcalc.snapshot)\n\n        return (\n            <div id=\"app\">\n                <div id=\"app-content\">\n                    {this.state.present == Presenting.Calculator\n                        ? this.renderCalculator()\n                        : ''}\n                    {this.state.present == Presenting.Loading\n                        ? <Loader\n                            subcalc={this.subcalc}\n                            onLoad={this.loadSnapshot}\n                            onNew={this.newMeeting}\n                        />\n                        : ''}\n                    {this.renderByline()}\n                    {this.renderNextCard()}\n                    <Growl ref={(el) => this.growl = el} />\n                </div>\n                {this.renderDebuggingInfo()}\n            </div>\n        )\n    }\n}\n","import * as React from 'react'\n// see https://www.npmjs.com/package/react-json-view\n// import ReactJson from 'react-json-view'\n// see: https://www.npmjs.com/package/react-json-tree\n// import JSONTree from 'react-json-tree'\n// local to this app\nimport * as _u from './Utilities'\n\ninterface Props {\n\tname?: string\n\tdata: any\n}\n\ninterface State {\n}\n\nexport class ShowJSON extends React.Component<Props, State> {\n\n\trender() {\n\t\t// react-json-view version, buggy after recalculations\n\t\t// return (\n\t\t// \t<ReactJson\n\t\t// \t\tsrc={this.props.data}\n\t\t// \t\tname={this.props.name}\n\t\t// \t\tenableClipboard={false}\n\t\t// \t\tindentWidth={2}\n\t\t// \t/>\n\t\t// )\n\t\t// simple version...\n\t\tconst jsonString = JSON.stringify(this.props.data, null, 2)\n\t\treturn (\n\t\t\t<div className=\"show-json\">\n\t\t\t\t<pre>\n\t\t\t\t\t{this.props.name ? `${this.props.name} = ` : ''}\n\t\t\t\t\t{jsonString}\n\t\t\t\t</pre>\n\t\t\t</div>\n\t\t)\n\t}\n}\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { App } from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root') as HTMLElement\n);\nregisterServiceWorker();\n"],"sourceRoot":""}