{"version":3,"sources":["Utilities.ts","App.tsx","Subcaucus.ts","SubCalcStorage.ts","SubcaucusRow.tsx","ValueCard.tsx","registerServiceWorker.ts","index.tsx"],"names":["alertFunction","debug","message","isDebugging","_console","_len","arguments","length","optionalParams","Array","_key","console","log","apply","concat","alertUser","error","alert","_len2","_key2","getQueryVariable","variable","vars","window","location","search","substring","split","i","pair","decodeURIComponent","unwrapString","maybeString","empty","undefined","randomSeed","Math","floor","random","String","prototype","trim","str","this","replace","test","charAt","hashCode","hash","charCodeAt","toDate","Date","Number","toCommaString","toString","singularPlural","singular","plural","comparisonValue","pushUnique","something","indexOf","push","max","reduce","accumulator","current","toTimestampString","toJSON","SortOrder","CardFor","Subcaucus","withID","init","_this","Object","classCallCheck","id","name","count","delegates","SubCalcStorage","version","author","currentMeetingKey","meetings","TSMap","meetingPrefix","meetingKey","created","newMeeting","currentSnapshot","emptyMeetingSnapshot","set","key","snapshots","writeMeetingSnapshot","currentSubcaucusID","subcaucuses","revised","revision","allowed","seed","_u","writeMeeting","meeting","jsonSubCalc","v","jsonSubCalcString","JSON","stringify","localStorage","setItem","e","Error","jsonMeeting","meetingSnapshotToJSON","map","snapshot","localStorageKey","jsonMeetingString","objectSpread","importSubCalc1Data","importSubCalc2Data","subcalc","parse","getItem","startsWith","getMeetingFromLocalStorage","currentMeeting","jsonToMeetingSnapshot","isArray","forEach","jsonSnapshot","jsonSubcaucuses","keys","subcaucus","jsonToSubcaucus","jsonSubcaucus","getSnapshot","timestamp","createClass","value","isCurrent","get","SubcaucusRow","_React$Component","props","possibleConstructorReturn","getPrototypeOf","call","handleName","event","currentTarget","setState","exchange","state","handleCount","num","notify","handleKey","focusOnWholeText","target","setTimeout","setSelectionRange","idPlus","suffix","inherits","_this$state","react","className","inputtextarea","autoComplete","type","rows","cols","placeholder","onChange","onKeyUp","inputtext","keyfilter","pattern","onBlur","primereact_button","label","icon","React","ValueCard","isPositiveInteger","originalValue","defaultValue","handleChange","onSave","isEmpty","save","allowEmpty","initialValue","cardFooter","footer","illegallyEmpty","originalIllegallyEmpty","saveButton","disabled","onClick","cancelButton","extraButtons","primereact_card","title","header","image","alt","src","children","description","autoFocus","App","callback","storage","subcaucusesChanged","snapshotRevised","keySuffix","initialCardState","WelcomeAndSetName","ChangingDelegates","ShowingInstructions","growl","refreshAppFromSnapshot","stateFromSnapshot","cards","sortName","None","sortCount","summary","snapshotFromState","componentDidUpdate","previousProps","previousState","nextSubcaucusID","addSubcaucus","newSubcaucus","forceSubcaucusesUpdate","defaultName","toLocaleDateString","allowedString","addCard","cardFor","to","toConsumableArray","addCardState","removeCard","seekingCardFor","from","filter","foundCardFor","removeCardState","switchCardState","fromCardFor","toCardFor","newCards","showingCard","forceUpdate","handleSubcaucusChange","subcaucusID","action","removeEmpties","subset","k","RemovingEmpties","sortOrderIcon","order","nextSortOrder","currentOrder","nextOrder","renderMenu","items","command","ShowingAbout","ShowingSecurity","growlAlert","menubar","model","renderAbout","ValueCard_ValueCard","ShowingBy","href","renderInstructions","renderSecurity","renderBy","renderWelcomeAndSetName","renderChangingName","ChangingName","renderChangingDelegates","renderRemovingEmpties","renderNextCard","sort","a","b","sortBySubcaucusName","comparison","nameA","toUpperCase","nameB","sortBySubcaucusCounts","Infinity","renderSubcaucusRows","values","SubcaucusRow_SubcaucusRow","renderSummary","minimumCountForViability","round","viability","nonViableCount","revisedViability","severity","show","closable","detail","_this2","menu","subcaucusRows","card","ref","el","Ascending","iconPos","toLocaleTimeString","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","ReactDOM","App_App","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.1dc6efc4.chunk.js","sourcesContent":["// Utilities.tsx\n//\n// A number of helpful functions used throughout the app.\n//\n// Recommend this file be imported as:\n// import * as _u from './Utilities'\n//\n// We use the name \"_u\" so that tslint won't complain if we\n// do not actually use any _u functions in our file. This way\n// we still can import the prototype extensions.\n\n// Prototype extensions\n\ndeclare global {\n\n\ttype TimestampString = string\n\ttype ComparisonValue = -1 | 0 | 1\n\n\tinterface String {\n\t\ttrim(): string\n\t\thashCode(): number\n\t\ttoDate(): Date\n\t}\n\n\tinterface Number {\n\t\ttoCommaString(): string\n\t\tsingularPlural(singular: string, plural: string): string\n\t\tcomparisonValue(): ComparisonValue\n\t}\n\n\tinterface Array<T> {\n\t\tpushUnique(something: T): Array<T>\n\t\tmax(): number\n\t}\n\n\t/**\n\t * Converts a date to our typical timestamp string,\n\t * which is really just JSON format with a type to be clearer.\n\t */\n\tinterface Date {\n\t\ttoTimestampString(): TimestampString\n\t}\n\n}\n\n// see http://blog.stevenlevithan.com/archives/faster-trim-javascript\nString.prototype.trim = function (): string {\n\tvar str = this.replace(/^\\s+/, '')\n\tfor (var i = str.length - 1; i >= 0; i--) {\n\t\tif (/\\S/.test(str.charAt(i))) {\n\t\t\tstr = str.substring(0, i + 1)\n\t\t\tbreak\n\t\t}\n\t}\n\treturn str\n}\n\n// https://stackoverflow.com/a/7616484\nString.prototype.hashCode = function (): number {\n\tlet hash = 0\n\tif (this.length === 0) return hash;\n\tfor (let i = 0; i < this.length; i++) {\n\t\tlet chr = this.charCodeAt(i);\n\t\thash = ((hash << 5) - hash) + chr;\n\t\thash |= 0; // Convert to 32bit integer\n\t}\n\treturn hash;\n}\n\nString.prototype.toDate = function (): Date {\n\treturn new Date(String(this))\n}\n\n// see: https://stackoverflow.com/a/2901298\nNumber.prototype.toCommaString = function (): string {\n\treturn this.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}\n\nNumber.prototype.singularPlural = function (singular: string, plural: string): string {\n\treturn `${this} ${this == 1 ? singular : plural}`\n}\n\nNumber.prototype.comparisonValue = function (): ComparisonValue {\n\tif (this < 0) return -1\n\tif (this > 0) return 1\n\treturn 0\n}\n\n// see: https://stackoverflow.com/a/12803141\nArray.prototype.pushUnique = function (something) {\n\tif (this.indexOf(something) === -1) {\n\t\tthis.push(something)\n\t}\n\treturn this\n}\n\nArray.prototype.max = function (): number {\n\treturn this.reduce((accumulator, current) => {\n\t\treturn Math.max(accumulator, current)\n\t})\n}\n\n/**\n * Converts a date to our typical timestamp string,\n * which is really just JSON format with a type to be clearer.\n */\nDate.prototype.toTimestampString = function (): TimestampString {\n\treturn this.toJSON()\n}\n\n// _u functions\n\n/**\n * _u.debug\n * \n * Pass along message and optionalParams to console.log\n * only if we are in a development environment.\n * \n */\nexport function debug(message?: any, ...optionalParams: any[]) {\n\tif (isDebugging()) {\n\t\tconsole.log(message, ...optionalParams)\n\t}\n}\n\nvar alertFunction: ((message: string) => void)\n\nexport function setAlertFunction(callback: ((message: string) => void)) {\n\talertFunction = callback\n}\n\nexport function alertUser(error: Error, ...optionalParams: any[]) {\n\tif (alertFunction) {\n\t\talertFunction(error.message)\n\t} else {\n\t\talert(error.message)\n\t}\n\tdebug(error, ...optionalParams)\n}\n\nexport function isDebugging(): boolean {\n\treturn !process.env.NODE_ENV || process.env.NODE_ENV === \"development\" || getQueryVariable(\"debug\") === \"yes\"\n}\n\nexport function isApp(): boolean {\n\treturn getQueryVariable(\"app\") === \"yes\"\n}\n\nexport function getQueryVariable(variable: string) {\n\tvar query = window.location.search.substring(1);\n\tvar vars = query.split('&');\n\tfor (var i = 0; i < vars.length; i++) {\n\t\tvar pair = vars[i].split('=');\n\t\tif (decodeURIComponent(pair[0]) == variable) {\n\t\t\treturn decodeURIComponent(pair[1]);\n\t\t}\n\t}\n\treturn undefined\n}\n\n/**\n * Unwrap the optional string, returning '' if it was undefined.\n * \n * @param {string | undefined} maybeString\n * @param {string} empty An alternative string to return if the input was undefined.\n */\nexport function unwrapString(maybeString?: string, empty = ''): string {\n\tif (maybeString == undefined) return empty\n\treturn maybeString\n}\n\n/**\n * Unwrap the optional number, returning 0 if it was undefined.\n * \n * @param {string | undefined} maybeNumber\n * @param {string} empty An alternative number to return if the input was undefined.\n */\nexport function unwrapNumber(maybeNumber?: number, empty = 0): number {\n\tif (maybeNumber == undefined) return empty\n\treturn maybeNumber\n}\n\n/**\n * Unwrap the optional boolean, returning false if it was undefined.\n * \n * @param {string | undefined} maybeBoolean\n * @param {string} empty An alternative boolean value to return if the input was undefined.\n */\nexport function unwrapBoolean(maybeBoolean?: boolean, empty = false): boolean {\n\tif (maybeBoolean == undefined) return empty\n\treturn maybeBoolean\n}\n\n/**\n * A random number provided by Math.random() to use as a seed\n * for our own random number sequences.\n * \n * Note that in SubCalc1 we used seconds from Unix epoch as seeds,\n * but that makes it somewhat confusing by implying a connection between\n * the time and the seed. There really is no such connection.\n */\nexport function randomSeed(): number {\n\treturn Math.floor(Math.random() * 1000000)\n}","import * as React from 'react'\n// see https://github.com/ClickSimply/typescript-map\nimport { TSMap } from 'typescript-map'\n// see https://www.primefaces.org/primereact\nimport { Button } from 'primereact/button'\nimport { Menubar } from 'primereact/menubar'\nimport { Growl } from 'primereact/growl'\nimport 'primereact/resources/primereact.min.css'\nimport 'primereact/resources/themes/nova-light/theme.css'\nimport 'primeicons/primeicons.css'\n// local to this app\nimport './App.scss'\nimport * as _u from './Utilities'\nimport { SubCalcStorage } from './SubCalcStorage'\nimport { Subcaucus } from './Subcaucus'\nimport { SubcaucusRow, SubcaucusRowAction } from './SubcaucusRow'\nimport { ValueCard } from './ValueCard'\n\n/**\n * Facilitates sorting up or down (or not at all), as needed.\n */\nenum SortOrder {\n    Descending = -1,\n    None = 0,\n    Ascending = 1,\n}\n\n/**\n * Includes the modal cards we can display.\n * When more than one card is waiting to be viewed,\n * they will be presented in the order listed in\n * this enumerator.\n * \n * NOTE: If you add a value you must also add a case\n * to the `renderNextCard()` method for the card to\n * ever be seen.\n */\nenum CardFor {\n    WelcomeAndSetName,\n    ChangingName,\n    ChangingDelegates,\n    RemovingEmpties,\n    ShowingAbout,\n    ShowingBy,\n    ShowingInstructions,\n    ShowingSecurity,\n}\n\n/**\n * Details that our calculations need to share out\n * to the user.\n */\ninterface SummaryInfo {\n    count: number\n    delegates: number\n    viability: number\n    revisedViability: number\n    minimumCountForViability: number\n    nonViableCount: number\n}\n\ninterface Props { }\n\n/**\n * React state for the SubCalc App.\n */\ninterface State {\n    created: TimestampString\n    snapshot: string\n    name: string\n    allowed: number\n    seed: number\n    // card status\n    cards: Array<CardFor>\n    // sorting info\n    sortName: SortOrder\n    sortCount: SortOrder\n    // summary info\n    summary?: SummaryInfo\n}\n\nexport class App extends React.Component<Props, State> {\n\n    /**\n     * An instance of `SubCalcStorage` that we use to\n     * read and write data from and to local storage.\n     */\n    private storage = new SubCalcStorage()\n\n    /**\n     * An array of `Subcaucus` objects used to track\n     * our subcaucuses and do calculations.\n     */\n    private subcaucuses = new TSMap<number, Subcaucus>()\n\n    /**\n     * Tracks the dirty state of the subcaucuses array.\n     * This toggles to `true` whenever significant data\n     * in the subcaucuses change. It is toggled back to\n     * `false` whenever we write data out to storage.\n     */\n    private subcaucusesChanged = false\n\n    /**\n     * The time at which the snapshot we start with\n     * was last revised.\n     */\n    private snapshotRevised: TimestampString = ''\n\n    /**\n     * The time of the last revision to significant\n     * data in this meeting. When this differs from\n     * `snapshotRevised` then we know we have what\n     * may become a new snapshot (if saved).\n     */\n    private revised: TimestampString = ''\n\n    /**\n     * Ensures that new subcacucuses are created with\n     * unique IDs. Those IDs are used as part of\n     * the subcaucus row keys so that the components\n     * are only reused appropriately.\n     */\n    private currentSubcaucusID = 1\n\n    /**\n     * To be included with component key whenever you want\n     * to be sure that component will _not_ be reused\n     * when the App refreshes with a new snapshot.\n     */\n    private keySuffix = String(Math.random())\n\n    /**\n     * This set of cards is to be presented whenever\n     * the user loads a new meeting. It forces them to\n     * create a meeting name and disclose the number of\n     * delegates to be allowed from this meeting.\n     */\n    initialCardState: Array<CardFor> = [\n        CardFor.WelcomeAndSetName,\n        CardFor.ChangingDelegates,\n        CardFor.ShowingInstructions\n    ]\n\n    /**\n     * A reference to the  PrimeReact growl notifier \n     * used to share alerts with the user. This reference\n     * is set during the `render()` stage.\n     */\n    growl: Growl | null = null\n\n    /**\n     * Creates the new SubCalc App.\n     */\n    constructor(props: Props) {\n        super(props)\n\n        _u.setAlertFunction(this.growlAlert)\n\n        const meeting = this.storage.getMeetingFromLocalStorage()\n\n        if (_u.isDebugging()) {\n            this.subcaucuses = new TSMap<number, Subcaucus>()\n            const timestamp = (new Date()).toTimestampString()\n\n            this.addSubcaucus(\"C\", 10, 0)\n            this.addSubcaucus(\"A\", 0, 0)\n            this.addSubcaucus(\"B\", 100, 5)\n            this.addSubcaucus(\"D\", 1, 0)\n            this.addSubcaucus()\n            this.snapshotRevised = timestamp\n            this.revised = timestamp\n            this.state = {\n                created: timestamp,\n                snapshot: 'Revised',\n                name: 'Debugging', allowed: 10, cards: [],\n                // name: '', allowed: 0, cards: this.initialCardState,\n                seed: 42,\n                // sorting info\n                sortName: SortOrder.None,\n                sortCount: SortOrder.None,\n                // summary info\n                summary: {\n                    count: 1234,\n                    delegates: 256,\n                    viability: 2.124132,\n                    revisedViability: 1.92123,\n                    minimumCountForViability: 3,\n                    nonViableCount: 3,\n                }\n            }\n        } else if (meeting) {\n            this.state = this.refreshAppFromSnapshot(meeting.current)\n        } else {\n            _u.alertUser(new Error(\"Could not read or write local storage.\"))\n\n            this.subcaucuses = new TSMap<number, Subcaucus>()\n            const timestamp = (new Date()).toTimestampString()\n            this.snapshotRevised = timestamp\n            this.revised = timestamp\n\n            this.state = {\n                created: timestamp,\n                snapshot: '',\n                name: 'Could not read local storage!',\n                allowed: 1,\n                seed: 1,\n                // card status\n                cards: [],\n                // sorting info\n                sortName: SortOrder.None,\n                sortCount: SortOrder.None,\n            }\n        }\n    }\n\n    /**\n     * Synchronizes instance variables with a new snapshot\n     * and returns new state to be used to synchronize state\n     * with the new snapshot as well.\n     * \n     * NOTE: This function does _not_ set the state. In most\n     * cases it should probably be wrapped in a `setState()` call:\n     * \n     * `this.setState(this.refreshAppFromSnapshot(snapshot))`\n     */\n    refreshAppFromSnapshot = (snapshot: MeetingSnapshot): State => {\n        this.keySuffix = String(Math.random())\n        this.subcaucuses = snapshot.subcaucuses\n        this.snapshotRevised = snapshot.revised\n        this.revised = snapshot.revised\n        this.currentSubcaucusID = snapshot.currentSubcaucusID\n        return this.stateFromSnapshot(snapshot)\n    }\n\n    /**\n     * Returns a `State` object which reflects the snapshot.\n     */\n    stateFromSnapshot = (snapshot: MeetingSnapshot): State => {\n        const allowed = snapshot.allowed\n        return {\n            created: snapshot.created,\n            snapshot: snapshot.revision,\n            name: snapshot.name,\n            allowed: allowed,\n            seed: snapshot.seed,\n            // card status\n            cards: allowed ? [] : this.initialCardState,\n            // sorting info\n            sortName: SortOrder.None,\n            sortCount: SortOrder.None,\n            summary: undefined\n        }\n    }\n\n    /**\n     * Returns a `MeetingSnapshot` object which reflects the current state\n     * and the values of various instance variables.\n     */\n    snapshotFromState = (): MeetingSnapshot => {\n        return {\n            created: this.state.created,\n            revised: this.revised,\n            revision: this.state.snapshot,\n            name: this.state.name,\n            allowed: this.state.allowed,\n            seed: this.state.seed,\n            currentSubcaucusID: this.currentSubcaucusID,\n            subcaucuses: this.subcaucuses,\n        }\n    }\n\n    /**\n     * Invoked immediately after React updating occurs. \n     * Not called for the initial render.\n     * \n     * Used to make sure significant changes are written\n     * out to the storage manager.\n     */\n    componentDidUpdate = (previousProps: Props, previousState: State) => {\n\n        if (this.subcaucusesChanged\n            || this.state.name != previousState.name\n            || this.state.allowed != previousState.allowed\n            || this.state.seed != previousState.seed\n        ) {\n            this.revised = (new Date()).toTimestampString()\n            this.subcaucusesChanged = false\n            this.storage.writeMeetingSnapshot(this.snapshotFromState())\n        }\n    }\n\n    /**\n     * Request a new meeting from the storage manager and\n     * set our state to reflect the new meeting.\n     */\n    newMeeting = () => {\n        const snapshot = this.storage.newMeeting()\n        this.setState(this.refreshAppFromSnapshot(snapshot))\n    }\n\n    /**\n     * Increment the `currentSubcaucusID` so that each subcaucus gets a unique id.\n     */\n    nextSubcaucusID = () => this.currentSubcaucusID++\n\n    /**\n     * Add a subcaucus (empty by default).\n     */\n    addSubcaucus = (name = '', count = 0, delegates = 0) => {\n        const newSubcaucus = new Subcaucus(this.nextSubcaucusID(), {\n            name: name,\n            count: count,\n            delegates: delegates\n        })\n        this.subcaucuses.set(newSubcaucus.id, newSubcaucus)\n\n        // we should only force an update if the state already exists\n        // this allows us to add subcaucuses in the constructor\n        // as long as we make sure to do it before we create the state\n        if (this.state) this.forceSubcaucusesUpdate()\n    }\n\n    /**\n     * Provide a default name for this meeting, including today's date.\n     */\n    defaultName = (): string => {\n        return \"Meeting on \" + this.state.created.toDate().toLocaleDateString(\"en-US\")\n    }\n\n    /**\n     * Provide a friendly string explaining the `allowed` number.\n     */\n    allowedString = (): string => {\n        return `${this.state.allowed} delegates to be elected`\n    }\n\n    /**\n     * Add a card to an array of cards (or to the current state cards\n     * if no array is provided). Note that we do not need to deduplicate\n     * this array since our `removeCard()` method will remove all copies\n     * of the same card anyway.\n     */\n    addCard = (cardFor: CardFor, to?: Array<CardFor>): Array<CardFor> => {\n        if (to === undefined) {\n            to = this.state.cards\n        }\n        return [...to, cardFor]\n    }\n\n    /**\n     * Adds a card to the cards state.\n     */\n    addCardState = (cardFor: CardFor) => {\n        this.setState({ cards: this.addCard(cardFor) })\n    }\n\n    /**\n     * Remove all copies of the given card from the array of cards\n     * (or from the current state cards if not array is provided).\n     */\n    removeCard = (seekingCardFor: CardFor, from?: Array<CardFor>): Array<CardFor> => {\n        if (from === undefined) {\n            from = this.state.cards\n        }\n        return from.filter(foundCardFor => foundCardFor != seekingCardFor)\n    }\n\n    /**\n     * Removes a card from the cards state.\n     */\n    removeCardState = (cardFor: CardFor) => {\n        this.setState({ cards: this.removeCard(cardFor) })\n    }\n\n    /**\n     * Swaps a card in for another card in the cards state.\n     * This can be used to make one card invoke another card.\n     */\n    switchCardState = (fromCardFor: CardFor, toCardFor: CardFor) => {\n        let newCards = this.removeCard(fromCardFor)\n        newCards = this.addCard(toCardFor, newCards)\n        this.setState({ cards: newCards })\n    }\n\n    /**\n     * Returns `true` if the given card is in the cards state.\n     * \n     * NOTE: The card may be one of many waiting to be displayed,\n     * so this may return `true` even when the card is not visible.\n     */\n    showingCard = (cardFor: CardFor): boolean => {\n        return this.state.cards.indexOf(cardFor) > -1\n    }\n\n    /**\n     * Handles changes to the `allowed` and `name` state, but \n     * nothing else. Expects to be called from an input form element.\n     */\n    handleChange = (name: string) => (event: React.FormEvent<HTMLInputElement>) => {\n        switch (name) {\n            case 'allowed':\n                var allowed = Number(event.currentTarget.value)\n                if (allowed < 0) {\n                    allowed = 0\n                }\n                this.setState({ allowed: allowed })\n                break\n            case 'name':\n                this.setState({ name: event.currentTarget.value })\n                break\n        }\n    }\n\n    /**\n     * Intended to facilitate focussing on the full text, even on iOS.\n     * However, this was proving problematic and is not currently in use.\n     */\n    focusOnWholeText = () => (event: React.FormEvent<HTMLInputElement>) => {\n        const target = event.currentTarget // event properties must be copied to use async\n        setTimeout(() => target.setSelectionRange(0, 9999), 0) // do this async to try to make Safari behave\n    }\n\n    /**\n     * Since the subcaucuses are kept in an instance variable,\n     * we cannot use `setState()` to update the interface.\n     * This method changes the relevant instance variables\n     * and forces an fresh render of the SubCalc App.\n     */\n    forceSubcaucusesUpdate = () => {\n        this.subcaucusesChanged = true\n        this.revised = (new Date()).toTimestampString()\n        this.forceUpdate()\n    }\n\n    /**\n     * Used by the `SubcaucusRow` via a callback to update the \n     * subcaucus array here in the app. \n     */\n    handleSubcaucusChange = (subcaucusID: number, action: SubcaucusRowAction) => {\n        _u.debug(\"subcaucus changed\", subcaucusID, action)\n        switch (action) {\n            case 'remove':\n                this.subcaucuses.filter((subcaucus, key) => {\n                    return key != subcaucusID\n                })\n                this.forceSubcaucusesUpdate()\n                return\n            case 'enter':\n                return\n            case 'sync':\n                return this.subcaucuses.get(subcaucusID)\n            default:\n                // this.subcaucuses[id] = changedSubcaucus\n                const subcaucus = this.subcaucuses.get(subcaucusID)\n                if (subcaucus.name != action.name || subcaucus.count != action.count) {\n                    subcaucus.name = action.name\n                    subcaucus.count = action.count\n                    this.forceSubcaucusesUpdate()\n                }\n                return\n        }\n    }\n\n    /**\n     * Removes all empty subcaucuses or just those that are not named.\n     */\n    removeEmpties = (subset: 'all' | 'unnamed' = 'all') => {\n        if (subset == 'all') {\n            this.subcaucuses.filter((subcaucus, key) => {\n                return subcaucus.count > 0\n            })\n        }\n        if (subset == 'unnamed') {\n            this.subcaucuses.filter((subcaucus, k, i) => {\n                _u.debug(\"remove?\", subcaucus.id, subcaucus.count, subcaucus.name, subcaucus.count > 0 || subcaucus.name != '', \"key\", k, \"index\", i)\n                return subcaucus.count > 0 || subcaucus.name != ''\n            })\n        }\n        this.removeCardState(CardFor.RemovingEmpties)\n    }\n\n    /**\n     * Returns an icon to represent the supplied `SortOrder`.\n     */\n    sortOrderIcon = (order: SortOrder): string => {\n        return [\"pi pi-chevron-circle-down\", \"pi pi-circle-off\", \"pi pi-chevron-circle-up\"][order + 1]\n    }\n\n    /**\n     * Cycles through the sort orders and returns the next one.\n     */\n    nextSortOrder = (currentOrder: SortOrder, direction = 1): SortOrder => {\n        // shifting over with +1 to nudge values over to where modulo is happy\n        let nextOrder = ((currentOrder + direction + 1) % 3)\n        if (nextOrder < 0) {\n            nextOrder += 3 // needed to cycle backwards\n        }\n        // shift back over -1 to align with our sort orders again\n        return nextOrder - 1\n    }\n\n    /**\n     * Returns JSX for the menubar.\n     */\n    renderMenu = (): JSX.Element => {\n        const items = [\n            {\n                label: \"About\",\n                icon: \"pi pi-fw pi-info-circle\",\n                items: [\n                    {\n                        label: \"Minnesota DFL Subcaucus Calculator\",\n                        command: () => this.addCardState(CardFor.ShowingAbout),\n                    },\n                    {\n                        label: \"Instructions\",\n                        command: () => this.addCardState(CardFor.ShowingInstructions),\n                    },\n                    {\n                        label: \"Data Security\",\n                        command: () => this.addCardState(CardFor.ShowingSecurity),\n                    },\n                ]\n            },\n            {\n                label: \"Meetings\",\n                icon: \"pi pi-fw pi-calendar\",\n                items: [\n                    {\n                        label: \"Save snapshot\",\n                        icon: \"pi pi-fw pi-clock\",\n                        command: () => this.growlAlert(\"Save snapshot.\", 'warn', 'TODO')\n                    },\n                    {\n                        label: \"New meeting\",\n                        icon: \"pi pi-fw pi-calendar-plus\",\n                        command: () => this.newMeeting()\n                    },\n                    {\n                        label: \"Duplicate meeting\",\n                        icon: \"pi pi-fw pi-clone\",\n                        command: () => this.growlAlert(\"Duplicate meeting.\", 'warn', 'TODO')\n                    },\n                    {\n                        label: \"Load meeting\",\n                        icon: \"pi pi-fw pi-folder-open\",\n                        command: () => this.growlAlert(\"Load meeting.\", 'warn', 'TODO')\n                    },\n                    {\n                        label: \"Flip the coin\",\n                        icon: \"pi pi-fw pi-refresh\",\n                        command: () => this.growlAlert(\"Coin flip.\", 'warn', 'TODO')\n                    },\n                ]\n            },\n            {\n                label: \"Share\",\n                icon: \"pi pi-fw pi-share-alt\",\n                items: [\n                    {\n                        label: \"Email report\",\n                        icon: \"pi pi-fw pi-envelope\",\n                        command: () => this.growlAlert(\"Email report.\", 'warn', 'TODO')\n                    },\n                    {\n                        label: \"Download text\",\n                        icon: \"pi pi-fw pi-align-left\",\n                        command: () => this.growlAlert(\"Download text.\", 'warn', 'TODO')\n                    },\n                    {\n                        label: \"Download CSV\",\n                        icon: \"pi pi-fw pi-table\",\n                        command: () => this.growlAlert(\"Download csv.\", 'warn', 'TODO')\n                    },\n                    {\n                        label: \"Download code\",\n                        icon: \"pi pi-fw pi-save\",\n                        command: () => this.growlAlert(\"Download code.\", 'warn', 'TODO')\n                    },\n                ]\n            },\n        ]\n        return <Menubar model={items} id=\"app-main-menu\" />\n    }\n\n    /**\n     * Returns JSX for the about card.\n     */\n    renderAbout = (): JSX.Element => {\n        return (\n            <ValueCard key=\"about-card\" id=\"about-card\"\n                title=\"Minnesota DFL Subcaucus Calculator\"\n                image=\"dfl.jpg\"\n                onSave={() => this.removeCardState(CardFor.ShowingAbout)}\n                extraButtons={\n                    <Button id=\"show-credits-button\"\n                        label=\"Credits\"\n                        icon=\"pi pi-user\"\n                        className=\"p-button-secondary\"\n                        onClick={() => this.switchCardState(CardFor.ShowingAbout, CardFor.ShowingBy)}\n                    />\n                }\n            >\n                <p>Originally written for <a href=\"http://sd64dfl.org\">SD64 DFL</a>, this app assists convenors of precinct caucuses and conventions in Minnesota. The Minnesota Democratic Farmer Labor (DFL) party uses a wonderful, but bit arcane, “walking subcaucus” process that is simple enough to do, but rather difficult to tabulate.</p>\n                <p>Given the number of delegates your meeting or caucus is allowed to send forward and the number of people in each subcaucus, this calculator determines how many of those delegates each subcaucus will elect. The rules it follows appeared on page 4 of the <a href=\"http://www.sd64dfl.org/more/caucus2014printing/2014-Official-Call.pdf\">DFL 2014 Official Call</a>, including the proper treatment of remainders. It makes the math involved in a walking subcaucus disappear.</p>\n                <p>The app could be used to facilitate a “walking subcaucus” or “<a href=\"https://en.wikipedia.org/wiki/Proportional_representation\">proportional representation</a>” system for any group.</p>\n            </ValueCard>\n        )\n    }\n\n    /**\n     * Returns JSX for the instructions card.\n     */\n    renderInstructions = (): JSX.Element => {\n        return (\n            <ValueCard key=\"instructions-card\" id=\"instructions-card\"\n                title=\"Fill in the subcaucuses\"\n                image=\"walking.jpg\"\n                onSave={() => this.removeCardState(CardFor.ShowingInstructions)}\n            >\n                <p>Now it is time to fill in the subcaucus information. Just add each subcaucus name and the count of participants. Usually a convention or cacucus will solicit the names of subcaucuses first, feel free to enter them right away without a count. Then people will be encouraged to walk around the room and congregate with the subcaucus that most closely represents their views. When each subcacus reports how many people they attracted, you can enter that as the count for that subcaucus.</p>\n                <p>As soon as you start entering subcaucus counts, the calculator will go to work determining how many delegates each subcaucus will be assigned. You can ignore those numbers until you have finished entering and confirming all the subcaucus counts. When you are done, the delegate numbers can be reported to the chair of your convention or caucus.</p>\n                <p>Since most conventions or caucuses will go through more than one round of \"walking\", you can just keep reusing your subcaucus list for each round. However, you might want to consider these steps at the end of each round:</p>\n                <ul>\n                    <li>Use the \"Meetings\" menu at the top to save a snapshot after each round of caucusing. This will give you a good record of the whole process.</li>\n                    <li>Use the \"Share\" menu to email a report about each round to the chair of the meeting just so they also have a clear record of the process.</li>\n                </ul>\n                <p>You can always get these instructions back under the \"About\" menu at the top. Have fun!</p>\n            </ValueCard>\n        )\n    }\n\n    /**\n     * Returns JSX for the security card.\n     */\n    renderSecurity = (): JSX.Element => {\n        return (\n            <ValueCard key=\"security-card\" id=\"security-card\"\n                title=\"Data security\"\n                image=\"security.jpg\"\n                extraButtons={\n                    <Button id=\"clear-data -button\"\n                        label=\"Clear All Data\"\n                        icon=\"pi pi-exclamation-triangle\"\n                        className=\"p-button-danger\"\n                        onClick={() => this.growlAlert(\"Clear data.\", 'warn', 'TODO')}\n                    />\n                }\n                onSave={() => this.removeCardState(CardFor.ShowingSecurity)}\n            >\n                <p>The subcaucus calculator stores all of the data you enter on your own device. It uses a feature of web browsers called \"local storage\" to save all your meeting information within your web browser. None of your data gets off your device unless you choose to share it.</p>\n                <p>Do note that this app is running on a web server, though, and that server will keep all the logs typical of web servers. This includes logs of your IP address and the documents you retrieve from the server. None of these logs will include your specific meeting information.</p>\n                <p>One thing to be aware of is that anyone using this same browser on this same device will be able to see your meeting information, including saved snapshots and past meetings, when they come to this web site. If this is a public device and you want to clear out all the data the calculator has stored, click the \"Clear All Data\" button.</p>\n                <p>Since the data is stored with your browser on this device, also be aware that you will not be able to see your meeting information from any other browser. This means that even you won't be able to get at this data unless you use the sharing features.</p> {/* TODO: create a transfer data feature */}\n                <p>You can use the \"Share\" menu to get data off your device when you need to do so. Once you share your meeting information this calculator is no longer in control of that data. Make good choices about sharing.</p>\n                <p>The good news is that there really isn't any private information in the calculator in the first place. Most meetings that use the walking subcacus process are public meetings and the data you store in this calculator is not sensitive. Still, we thought you'd like to know we treat it as <em>your</em> data and do not share it unless you ask us to.</p>\n            </ValueCard>\n        )\n    }\n\n    /**\n     * Returns JSX for the byline credit card.\n     */\n    renderBy = (): JSX.Element => {\n        return (\n            <ValueCard key=\"by-card\" id=\"by-card\"\n                title=\"Brought to you by Tenseg LLC\"\n                image=\"tenseg.jpg\"\n                onSave={() => this.removeCardState(CardFor.ShowingBy)}\n            >\n                <p>We love the walking subcaucus process and it makes us a bit sad that the squirrelly math required to calculate who gets how many delegate discourages meetings and caucuses from using the process. We hope this calculator makes it easier for you to get to know your neighbors as you work together to change the world!</p>\n                <p>Please check us out at <a href=\"https://tenseg.net\">tenseg.net</a> if you need help building a website or making appropriate use of technology.</p>\n            </ValueCard>\n        )\n    }\n\n    /**\n     * Returns JSX for the welcome card, which is a special version\n     * of the card to enter a name for the meeting.\n     */\n    renderWelcomeAndSetName = (): JSX.Element => {\n        return (\n            <ValueCard key=\"welcome-card\" id=\"welcome-card\"\n                title=\"Welcome to the Minnesota DFL Subcacus Calculator\"\n                image=\"dfl.jpg\"\n                description='Please start by specifying the name of your meeting here. Most meetings have a name, like the \"Ward 4 Precinct 7 Caucus\" or the \"Saint Paul City Convention\".'\n                value={this.state.name}\n                defaultValue={this.defaultName()}\n                allowEmpty={false}\n                onSave={(value?: string) => {\n                    if (value == undefined) {\n                        this.removeCardState(CardFor.WelcomeAndSetName)\n                    } else {\n                        this.setState({\n                            name: value,\n                            cards: this.removeCard(CardFor.WelcomeAndSetName),\n                        })\n                    }\n                }}\n            />\n        )\n    }\n\n    /**\n     * Returns JSX for the card to change a meeting's name.\n     */\n    renderChangingName = (): JSX.Element => {\n        return (\n            <ValueCard key=\"name-value\" id=\"name-value\"\n                title=\"Meeting name?\"\n                value={this.state.name}\n                defaultValue={this.defaultName()}\n                allowEmpty={false}\n                extraButtons={this.state.name\n                    ? <Button id=\"new-meeting-button\"\n                        label=\"New meeting\"\n                        icon=\"pi pi-calendar-plus\"\n                        className=\"p-button-secondary\"\n                        onClick={() => this.growlAlert(\"New meeting.\", 'warn', 'TODO')}\n                    />\n                    : <></>\n                }\n                onSave={(value?: string) => {\n                    if (value == undefined) {\n                        this.removeCardState(CardFor.ChangingName)\n                    } else {\n                        this.setState({\n                            name: value,\n                            cards: this.removeCard(CardFor.ChangingName),\n                        })\n                    }\n                }}\n            >\n                <p>You can save a new name for this meeting or, if this is really a new event, you may want to start a new meeting altogether.</p>\n            </ValueCard>\n        )\n    }\n\n    /**\n     * Returns JSX for the card to change the \n     * number of delegates allowed from a meeting.\n     */\n    renderChangingDelegates = (): JSX.Element => {\n        return (\n            <ValueCard key=\"delegate-value\" id=\"delegate-value\"\n                title=\"Number of delegates allowed?\"\n                type=\"positive integer\"\n                value={this.state.allowed.toString()}\n                allowEmpty={false}\n                extraButtons={this.state.allowed\n                    ? <Button id=\"new-meeting-button\"\n                        label=\"New meeting\"\n                        icon=\"pi pi-calendar-plus\"\n                        className=\"p-button-secondary\"\n                        onClick={() => this.growlAlert(\"New meeting.\", 'warn', 'TODO')}\n                    />\n                    : <></>\n                }\n                onSave={(value?: string) => {\n                    if (value == undefined) {\n                        this.removeCardState(CardFor.ChangingDelegates)\n                    } else {\n                        this.setState({\n                            allowed: Number(value),\n                            cards: this.removeCard(CardFor.ChangingDelegates),\n                        })\n                    }\n                }}\n            >\n                <p>Specify the number of delegates that your meeting or caucus is allowed to send on to the next level. This is the number of delegates to be elected by your meeting.\n                {this.state.allowed\n                        ? <span> If this is actually a new event, you may want to start a new meeting instead</span>\n                        : <></>\n                    }\n                </p>\n            </ValueCard>\n        )\n    }\n\n    /**\n     * Returns JSX for the card that allows the user to\n     * back out of removing empty subcaucuses.\n     */\n    renderRemovingEmpties = (): JSX.Element => {\n        return (\n            <ValueCard key=\"remove-empties-card\" id=\"remove-empties-card\"\n                title=\"Remove empty subcaucuses\"\n                footer={\n                    <>\n                        <Button id=\"remove-all-empties-button\"\n                            label=\"Remove All Empties\"\n                            icon=\"pi pi-trash\"\n                            onClick={() => this.removeEmpties()}\n                        />\n                        <Button id=\"remove-some-empties-button\"\n                            label=\"Remove Only Unnamed\"\n                            icon=\"pi pi-trash\"\n                            className=\"p-button-warning\"\n                            onClick={() => this.removeEmpties('unnamed')}\n                        />\n                        <Button id=\"cancel-remove-button\"\n                            label=\"Cancel\"\n                            icon=\"pi pi-times\"\n                            className=\"p-button-secondary\"\n                            onClick={() => this.removeCardState(CardFor.RemovingEmpties)}\n                        />\n                    </>\n                }\n            >\n                <p>An \"empty\" subcaucus is one with no participants &mdash; a zero count.</p>\n                <p>You can choose to remove all empty subcaucuses, or only those which also have no names.</p>\n            </ValueCard>\n        )\n    }\n\n    /**\n     * Returns JSX next card to be displayed from the cards state.\n     * Returns and empty JSX element if there are no cards waiting.\n     * \n     * This function sorts the cards array so that highest priority\n     * cards are displayed first.\n     * \n     * NOTE: Please be sure to add any new `CardFor` values as \n     * cases in this function.\n     */\n    renderNextCard = (): JSX.Element => {\n        return this.state.cards.sort((a, b) => b - a).reduce((accumulator: JSX.Element, cardFor: CardFor): JSX.Element => {\n            _u.debug(\"filtering cards\", accumulator, cardFor)\n            switch (cardFor) {\n                case CardFor.WelcomeAndSetName: return this.renderWelcomeAndSetName()\n                case CardFor.ShowingInstructions: return this.renderInstructions()\n                case CardFor.ShowingAbout: return this.renderAbout()\n                case CardFor.ShowingBy: return this.renderBy()\n                case CardFor.ChangingName: return this.renderChangingName()\n                case CardFor.ChangingDelegates: return this.renderChangingDelegates()\n                case CardFor.RemovingEmpties: return this.renderRemovingEmpties()\n                case CardFor.ShowingSecurity: return this.renderSecurity()\n            }\n            return accumulator\n        }, <></>)\n    }\n\n    /**\n     * A method to sort subcaucuses by name.\n     * \n     * NOTE: This depends on the `sortName` state to determine\n     * whether the result will be ascending or descending.\n     */\n    sortBySubcaucusName = (a: Subcaucus, b: Subcaucus): number => {\n\n        // fall back to order of entry\n        let comparison = a.id - b.id\n        const nameA = a.name ? a.name.toUpperCase() : `SUBCAUCUS ${a.id}`;\n        const nameB = b.name ? b.name.toUpperCase() : `SUBCAUCUS ${b.id}`;\n        if (nameA < nameB) {\n            comparison = -1;\n        }\n        if (nameA > nameB) {\n            comparison = 1;\n        }\n        return comparison * this.state.sortName\n    }\n\n    /**\n     * A method to sort subcaucuses by count.\n     * This method sorts first by count, then subsorts by\n     * the number of delegates, and then sorts by name\n     * (names will always be ascending). It also makes sure\n     * that subcaucuses without any members will sort to\n     * the bottom regardless of the chosen sort order.\n     * \n     * NOTE: This depends on the `sortCount` state to determine\n     * whether the result will be ascending or descending.\n     */\n    sortBySubcaucusCounts = (a: Subcaucus, b: Subcaucus): number => {\n\n        // start with delegates, then check on count, then fall back if needed\n        const delegateComparison = (a.delegates - b.delegates).comparisonValue()\n\n        let ac = a.count ? a.count : this.state.sortCount * Infinity\n        let bc = b.count ? b.count : this.state.sortCount * Infinity\n        const countComparison = (ac - bc).comparisonValue()\n\n\n        const weightedComparison = (0.1 * delegateComparison) + countComparison\n\n        let comparison = weightedComparison\n\n        if (comparison == 0) {\n            // we want the names to always sort in descending order\n            // during count comparisons, so we undo the effect of direction\n            // (both 1 * 1 and -1 * -1 equal 1) and then force a -1 direction \n            comparison = this.sortBySubcaucusName(a, b) * this.state.sortName * -1\n        }\n\n        return comparison * this.state.sortCount\n    }\n\n    /**\n     * Returns JSX for the subcaucus rows.\n     */\n    renderSubcaucusRows = (): JSX.Element[] => {\n        // sort subcaucuses by id number by default\n        let sort = (a: Subcaucus, b: Subcaucus) => {\n            return a.id - b.id\n        }\n\n        if (this.state.sortName != SortOrder.None) {\n            sort = this.sortBySubcaucusName\n        }\n\n        if (this.state.sortCount != SortOrder.None) {\n            sort = this.sortBySubcaucusCounts\n        }\n\n        return this.subcaucuses.values().sort(sort).map((subcaucus): JSX.Element => {\n            return (\n                <SubcaucusRow key={`${subcaucus.id} ${this.keySuffix}`}\n                    id={subcaucus.id}\n                    exchange={this.handleSubcaucusChange}\n                />\n            )\n        })\n    }\n\n    /**\n     * Returns JSX for the summary section of the SubCalc App.\n     */\n    renderSummary = (): JSX.Element => {\n        const { summary } = this.state\n\n        return ((summary)\n            ? <div id=\"summary-container\">\n                <div className=\"summary-row\">\n                    <div className=\"summary-label\">\n                        Total participants and delegates elected\n                    </div>\n                    <div className=\"summary-count\">\n                        <strong>\n                            {summary.count.toCommaString()}\n                        </strong>\n                    </div>\n                    <div className=\"summary-delegates\">\n                        {summary.delegates.toCommaString()}\n                    </div>\n                </div>\n                <div className=\"summary-row\">\n                    <div className=\"summary-label\">\n                        Minimum of <strong>{summary.minimumCountForViability.singularPlural(\"person\", \"people\")}</strong> needed to make a subcaucus viable\n                    </div>\n                </div>\n                <div className=\"summary-row\">\n                    <div className=\"summary-label\">\n                        Viability number\n                    </div>\n                    <div className=\"summary-count\">\n                        <strong>\n                            {Math.round(summary.viability * 1000) / 1000}\n                        </strong>\n                    </div>\n                </div>\n                {summary.nonViableCount\n                    ? <div className=\"summary-row clickable\"\n                        onClick={() => this.growlAlert(\"Explain viability in more detail.\", 'warn', 'TODO')}\n                    >\n                        <div className=\"summary-label\">\n                            Recalculated viability number ({summary.nonViableCount.singularPlural(\"person\", \"people\")} in non-viable subcaucuses)\n                        </div>\n                        <div className=\"summary-count\">\n                            {Math.round(summary.revisedViability * 1000) / 1000}\n                        </div>\n                    </div>\n                    : ''\n                }\n            </div>\n            : <div id=\"summary-container\">\n                <div className=\"summary-row\">\n                    <div className=\"summary-label\">\n                        To get a \"viability number\" just put the count of all the people in the room into a single subcaucus.\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    /**\n     * Shows an alert using PrimeReact `Growl` if it is available,\n     * or simply as an alert if there is not growl instance yet.\n     */\n    growlAlert = (message: string, severity: 'error' | 'warn' | 'success' | 'info' = 'error', summary = '') => {\n        if (!summary && message) {\n            summary = message\n            message = ''\n        }\n        if (this.growl) {\n            this.growl.show({\n                severity: severity,\n                summary: summary,\n                closable: false,\n                detail: message\n            });\n        } else {\n            alert(message)\n        }\n    }\n\n    /**\n     * Returns the JSX for the whole SubCalc App.\n     */\n    render() {\n\n        _u.debug(\"rendering\", this.subcaucuses)\n\n        const menu = this.renderMenu()\n        const subcaucusRows = this.renderSubcaucusRows()\n        const summary = this.renderSummary()\n        const card = this.renderNextCard()\n\n        const { name, snapshot, sortName, sortCount } = this.state\n\n        return (\n            <div id=\"app\">\n                <div id=\"app-content\">\n                    {menu}\n                    <Growl ref={(el) => this.growl = el} />\n                    <div id=\"meeting-info\">\n                        <div id=\"meeting-name\" className=\"button\"\n                            onClick={() => this.addCardState(CardFor.ChangingName)}\n                        >\n                            {name ? name : this.defaultName()}\n                            {this.revised === this.snapshotRevised && snapshot != ''\n                                ? <span className=\"snapshot\">\n                                    {snapshot}\n                                </span>\n                                : ''\n                            }\n                        </div>\n                        <div id=\"delegates-allowed\" className=\"button\"\n                            onClick={() => this.addCardState(CardFor.ChangingDelegates)}\n                        >{this.allowedString()}</div>\n                    </div>\n                    <div id=\"subcaucus-container\">\n                        <div id=\"subcaucus-header\">\n                            <Button id=\"subcaucus-name-head\"\n                                label=\"Subcaucus\"\n                                icon={this.sortOrderIcon(sortName)}\n                                onClick={() => this.setState({\n                                    sortName: this.state.sortName ? SortOrder.None : SortOrder.Ascending,\n                                    sortCount: SortOrder.None\n                                })}\n                            />\n                            <Button id=\"subcaucus-count-head\"\n                                label=\"Count\"\n                                iconPos=\"right\"\n                                icon={this.sortOrderIcon(sortCount)}\n                                onClick={() => this.setState({\n                                    sortName: SortOrder.None,\n                                    sortCount: this.nextSortOrder(sortCount, -1)\n                                })}\n                            />\n                            <Button id=\"subcaucus-delegate-head\"\n                                label=\"Dels\"\n                            />\n                        </div>\n                        <div id=\"subcaucus-list\">\n                            {subcaucusRows}\n                        </div>\n                        <div id=\"subcaucus-footer\">\n                            <Button id=\"add-subcaucus-button\"\n                                label=\"Add a Subcaucus\"\n                                icon=\"pi pi-plus\"\n                                onClick={() => this.addSubcaucus()}\n                            />\n                            <Button id=\"remove-empty-subcaucuses-button\"\n                                label=\"Remove Empties\"\n                                icon=\"pi pi-trash\"\n                                onClick={() => this.addCardState(CardFor.RemovingEmpties)}\n                            />\n                        </div>\n                    </div>\n                    {summary}\n                    <Button id=\"app-byline\"\n                        label=\"Brought to you by Tenseg LLC\"\n                        href=\"https://tenseg.net\"\n                        onClick={() => this.addCardState(CardFor.ShowingBy)}\n                    />\n                    {card}\n                </div>\n                {_u.isDebugging()\n                    ? <div className=\"debugging\">\n                        <p>This is debugging info for <a href=\"https://grand.clst.org:3000/tenseg/subcalc-pr/issues\" target=\"_repository\">subcalc-pr</a> (with <a href=\"https://reactjs.org/docs/react-component.html\" target=\"_react\">ReactJS</a>, <a href=\"https://www.primefaces.org/primereact/\" target=\"_primereact\">PrimeReact</a>, <a href=\"https://www.primefaces.org/primeng/#/icons\" target=\"_primeicons\">PrimeIcons</a>) derrived from <a href=\"https://bitbucket.org/tenseg/subcalc-js/src\" target=\"_bitbucket\">subcalc-js</a>.\n                        </p>\n                        <pre>{\"rendered App \" + (new Date()).toLocaleTimeString()}</pre>\n                        <pre>{\"this.state is \" + JSON.stringify(this.state, null, 2)}</pre>\n                        <pre>{\"this.subcaucuses is \" + JSON.stringify(this.subcaucuses, null, 2)}</pre>\n                    </div>\n                    : <></>\n                }\n            </div>\n        )\n    }\n}\n","// we will need a way to type validate the json we import\n// see https://github.com/mojotech/json-type-validation\n// or maybe just use a JSON.parse reviver to type the data\n\ndeclare global {\n\tinterface SubcaucusInitializer {\n\t\tname?: string\n\t\tcount?: number\n\t\tdelegates?: number\n\t}\n}\n\nexport class Subcaucus {\n\n\treadonly id: number\n\tname: string\n\tcount: number\n\tdelegates: number\n\n\t/**\n\t * Creates a new subcacucus instance.\n\t * \n\t * @param {number} withID required number\n\t * @param {SubcaucusInitializer | undefined} init optional {name?: string, count?: number, delegates?: number}\n\t */\n\tconstructor(withID: number, init?: SubcaucusInitializer) {\n\t\tif (init === undefined) init = {}\n\n\t\tthis.id = withID\n\t\tthis.name = init[\"name\"] ? String(init[\"name\"]) : ''\n\t\tthis.count = init[\"count\"] ? Number(init[\"count\"]) : 0\n\t\tthis.delegates = init[\"delegates\"] ? Number(init[\"delegates\"]) : 0\n\t}\n\n\ttoJSON = (): { name: string, count: number } => {\n\t\treturn {\n\t\t\tname: this.name,\n\t\t\tcount: this.count\n\t\t}\n\t}\n}","/**\n * SubCalcStorage.ts\n * \n * Manages storage in app or localStorage.\n * Handles conversion to and from JSON.\n */\n\n// see https://github.com/ClickSimply/typescript-map\nimport { TSMap } from 'typescript-map'\n// local to this app\nimport * as _u from './Utilities'\nimport { Subcaucus } from './Subcaucus'\n\ndeclare global {\n\n\t/**\n\t * Elements of a snapshot of a meeting in time.\n\t */\n\tinterface MeetingSnapshot {\n\t\tcreated: TimestampString\n\t\trevised: TimestampString\n\t\trevision: string\n\t\tname: string\n\t\tallowed: number\n\t\tseed: number\n\t\tcurrentSubcaucusID: number\n\t\tsubcaucuses: TSMap<number, Subcaucus>\n\t}\n\n\t/**\n\t * Elements of the whole meeting.\n\t */\n\tinterface Meeting {\n\t\tkey: string\n\t\tcreated: TimestampString\n\t\tauthor: number\n\t\tcurrent: MeetingSnapshot\n\t\tsnapshots: TSMap<string, MeetingSnapshot>\n\t}\n\n}\n\n/**\n * Manages storage in app or localStorage.\n * Handles conversion to and from JSON.\n */\nexport class SubCalcStorage {\n\n\t/**\n\t * Version helps to future-proof the stored JSON.\n\t */\n\tversion = 2\n\n\t/**\n\t * This author is just a random number that will help\n\t * distinguish meeting identifiers if they start to be\n\t * shared among devices. Hopefully a combination of \n\t * author and meeting creation date won't collide.\n\t */\n\tauthor = 0\n\n\t/**\n\t * Used to find the current meeting.\n\t */\n\tcurrentMeetingKey = ''\n\n\t/**\n\t * A map of meeting keys to meeting records.\n\t */\n\tmeetings = new TSMap<string, Meeting>()\n\n\t/**\n\t * A prefix to be used when creating local storage items\n\t * for each meeting.\n\t */\n\tmeetingPrefix = \"sc-meeting\"\n\n\t/**\n\t * Create an instance of a storage object to manage local storage.\n\t */\n\tconstructor() {\n\n\t\t// then we look for local data\n\n\t\tthis.importSubCalc2Data()\n\n\t\tif (!this.author) {\n\n\t\t\tthis.importSubCalc1Data()\n\n\t\t\tif (!this.author) {\n\n\t\t\t\t// no author means that subcalc has never run in this browser\n\t\t\t\t// so we gather together some basics about this instance\n\n\t\t\t\tthis.author = _u.randomSeed()\n\n\t\t\t\t// since there was no data at all, we also don't have a\n\t\t\t\t// current meeting, so we have to create that and write\n\t\t\t\t// it out as well\n\n\t\t\t\tthis.newMeeting()\n\t\t\t}\n\t\t}\n\n\n\t\t// then we look for URI data\n\t\t// this would become current if we find it\n\n\t}\n\n\t/**\n\t * Returns a string to be used as a key for looking up a meeting.\n\t */\n\tmeetingKey = (created: TimestampString, author?: number): string => {\n\t\t// we include the author number in the key in case meetings are shared\n\t\tauthor = author || this.author\n\t\treturn `${created} ${author}`\n\t}\n\n\t/**\n\t * Creates a new meeting and returns the current snapshot\n\t * from that new meeting.\n\t */\n\tnewMeeting = (): MeetingSnapshot => {\n\t\tconst created = (new Date()).toTimestampString()\n\t\tthis.currentMeetingKey = this.meetingKey(created)\n\n\t\tconst currentSnapshot = this.emptyMeetingSnapshot(created)\n\n\t\tthis.meetings.set(this.currentMeetingKey, {\n\t\t\tkey: this.currentMeetingKey,\n\t\t\tauthor: this.author,\n\t\t\tcreated: created,\n\t\t\tcurrent: currentSnapshot,\n\t\t\tsnapshots: new TSMap<string, MeetingSnapshot>()\n\t\t})\n\n\t\tthis.writeMeetingSnapshot(currentSnapshot)\n\n\t\treturn currentSnapshot\n\t}\n\n\t/**\n\t * Create a new and empty snapshot of a meeting.\n\t */\n\temptyMeetingSnapshot = (created?: TimestampString): MeetingSnapshot => {\n\t\tif (created === undefined) {\n\t\t\tcreated = (new Date()).toTimestampString()\n\t\t}\n\n\t\t// create a subcaucus ID and three subcaucuses\n\t\tlet currentSubcaucusID = 1\n\t\tlet subcaucuses = new TSMap<number, Subcaucus>()\n\t\tsubcaucuses.set(currentSubcaucusID, new Subcaucus(currentSubcaucusID++))\n\t\tsubcaucuses.set(currentSubcaucusID, new Subcaucus(currentSubcaucusID++))\n\t\tsubcaucuses.set(currentSubcaucusID, new Subcaucus(currentSubcaucusID++))\n\n\t\treturn {\n\t\t\tcreated: created,\n\t\t\trevised: '',\n\t\t\trevision: '',\n\t\t\tname: '',\n\t\t\tallowed: 0,\n\t\t\tseed: _u.randomSeed(),\n\t\t\tcurrentSubcaucusID: currentSubcaucusID,\n\t\t\tsubcaucuses: subcaucuses\n\t\t}\n\t}\n\n\t/**\n\t * Writes the a meeting snapshot to local storage.\n\t */\n\twriteMeetingSnapshot(snapshot: MeetingSnapshot) {\n\t\tconst meetingKey = this.meetingKey(snapshot.created)\n\t\tconst isCurrent = (snapshot.revision == '')\n\t\tconst meeting = this.meetings.get(meetingKey)\n\n\t\tif (meeting) {\n\t\t\t// add the snapshot to our instance data\n\t\t\tif (isCurrent) {\n\t\t\t\tthis.meetings.get(meetingKey).current = snapshot\n\t\t\t} else {\n\t\t\t\tthis.meetings.get(meetingKey).snapshots[snapshot.revised] = snapshot\n\t\t\t}\n\n\t\t\t// synchronize our instance data with local storage\n\t\t\tthis.writeMeeting(meeting)\n\t\t} else {\n\t\t\t_u.alertUser(new Error(`Meeting not found for ${meetingKey}`))\n\t\t}\n\t}\n\n\t/**\n\t * Writes a meeting to local storage.\n\t */\n\twriteMeeting = (meeting: Meeting) => {\n\t\tconst jsonSubCalc = {\n\t\t\tv: this.version,\n\t\t\tauthor: this.author,\n\t\t\tcurrent: meeting.key\n\t\t}\n\n\t\ttry {\n\t\t\tconst jsonSubCalcString = JSON.stringify(jsonSubCalc)\n\t\t\t_u.debug(\"storing subcalc2\", jsonSubCalcString)\n\t\t\tlocalStorage.setItem(\"subcalc2\", jsonSubCalcString)\n\t\t} catch (e) {\n\t\t\t_u.alertUser(new Error(\"Failed to save subcalc2 to local storage\"), e)\n\t\t\treturn\n\t\t}\n\n\t\tconst jsonMeeting = {\n\t\t\tv: this.version,\n\t\t\tcreated: meeting.created,\n\t\t\tauthor: meeting.author,\n\t\t\tcurrent: this.meetingSnapshotToJSON(meeting.current),\n\t\t\tsnapshots: meeting.snapshots.map((snapshot) => {\n\t\t\t\treturn this.meetingSnapshotToJSON(snapshot)\n\t\t\t})\n\t\t}\n\n\t\tconst localStorageKey = `${this.meetingPrefix} ${meeting.key}`\n\t\ttry {\n\t\t\tconst jsonMeetingString = JSON.stringify(jsonMeeting)\n\t\t\t_u.debug(`storing ${localStorageKey}`, jsonMeetingString)\n\t\t\tlocalStorage.setItem(`${localStorageKey}`, jsonMeetingString)\n\t\t} catch (e) {\n\t\t\t_u.alertUser(new Error(`Error saving ${localStorageKey} to local storage`), e)\n\t\t\treturn\n\t\t}\n\t}\n\n\t/**\n\t * Create a JSON object from a meeting snapshot.\n\t * \n\t * NOTE: This object is _not_ stringified yet.\n\t */\n\tmeetingSnapshotToJSON = (snapshot: MeetingSnapshot): Object => {\n\t\treturn { ...snapshot, created: undefined, currentSubcaucusID: undefined }\n\t}\n\n\timportSubCalc1Data = () => {\n\n\t}\n\n\t/**\n\t * Try to populate this instance with subcalc2 data from local storage.\n\t */\n\timportSubCalc2Data = () => {\n\t\tconst subcalc = JSON.parse(localStorage.getItem(\"subcalc2\") || 'false')\n\n\t\tif (!subcalc) return // we just don't have any subcalc2 data yet\n\n\t\tthis.author = Number(subcalc[\"author\"]) || 0\n\n\t\tif (!this.author) {\n\t\t\t_u.debug(new Error(\"No author in subcalc2\"), subcalc)\n\t\t\treturn // the subcalc2 data we have is malformed and will be overwritten\n\t\t}\n\n\t\tthis.currentMeetingKey = String(subcalc[\"current\"]) || ''\n\n\t\tconst length = localStorage.length\n\n\t\tthis.meetings = new TSMap<string, Meeting>()\n\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\tconst key = localStorage.key(i)\n\t\t\tif (!key) break\n\t\t\tif (key.startsWith(this.meetingPrefix)) {\n\t\t\t\tconst meeting = this.getMeetingFromLocalStorage(key)\n\t\t\t\tif (meeting) {\n\t\t\t\t\tthis.meetings.set(meeting.key, meeting)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Given a meeting key, this functions looks for that meeting in\n\t * local storage and creates a meeting object to hold the information.\n\t */\n\tgetMeetingFromLocalStorage = (key?: string): Meeting | undefined => {\n\t\tlet jsonMeeting: Object\n\n\t\tkey = key || `${this.meetingPrefix} ${this.currentMeetingKey}`\n\n\t\ttry {\n\t\t\tjsonMeeting = JSON.parse(localStorage.getItem(key) || 'false')\n\t\t} catch (e) {\n\t\t\t_u.debug(e)\n\t\t\treturn undefined\n\t\t}\n\n\t\tif (!jsonMeeting) {\n\t\t\t_u.debug(new Error(`Could not retreive ${key}`))\n\t\t\treturn undefined\n\t\t}\n\n\t\tconst author = Number(jsonMeeting[\"author\"])\n\t\tconst created = String(jsonMeeting[\"created\"])\n\n\t\tif (!author || !created) {\n\t\t\t_u.debug(new Error(`Missing author or created in ${key}`), jsonMeeting)\n\t\t\treturn undefined\n\t\t}\n\n\t\tconst currentMeeting = this.jsonToMeetingSnapshot(jsonMeeting[\"current\"], created)\n\n\t\tif (!currentMeeting) {\n\t\t\t_u.debug(new Error(`Could not find current snapshot in ${key}`), jsonMeeting)\n\t\t\treturn undefined\n\t\t}\n\n\t\tif (!Array.isArray(jsonMeeting[\"snapshots\"])) {\n\t\t\t_u.debug(new Error(`No \"snapshots\" array in ${key}`), jsonMeeting)\n\t\t\treturn undefined\n\t\t}\n\n\t\tlet snapshots = new TSMap<string, MeetingSnapshot>()\n\n\t\tjsonMeeting[\"snapshots\"].forEach((jsonSnapshot: any) => {\n\t\t\tconst snapshot = this.jsonToMeetingSnapshot(jsonSnapshot, created)\n\t\t\tif (snapshot) {\n\t\t\t\tsnapshots.set(snapshot.revised, snapshot)\n\t\t\t}\n\t\t})\n\n\t\treturn {\n\t\t\tkey: this.meetingKey(created, author),\n\t\t\tauthor: author,\n\t\t\tcreated: created,\n\t\t\tcurrent: currentMeeting,\n\t\t\tsnapshots: snapshots\n\t\t}\n\t}\n\n\t/**\n\t * Given the JSON object version of snapshot data and the meeting's\n\t * created timestamp, this function populates a meeting snapshot object.\n\t */\n\tjsonToMeetingSnapshot = (jsonSnapshot: any, created: TimestampString): MeetingSnapshot | undefined => {\n\n\t\tconst revised = String(jsonSnapshot['revised'] || '')\n\t\tconst revision = String(jsonSnapshot['revision'] || '')\n\t\tconst name = String(jsonSnapshot['name'] || '')\n\t\tconst allowed = Number(jsonSnapshot['allowed'] || 0)\n\t\tconst seed = Number(jsonSnapshot['seed'])\n\n\t\tif (!seed) {\n\t\t\t_u.debug(new Error(\"Seed missing in snapshot\"), jsonSnapshot)\n\t\t\treturn undefined\n\t\t}\n\n\t\tconst jsonSubcaucuses = jsonSnapshot['subcaucuses']\n\n\t\tif (typeof jsonSubcaucuses != \"object\") {\n\t\t\t_u.debug(new Error(\"Non-object subcaucuses\"), jsonSnapshot)\n\t\t\treturn undefined\n\t\t}\n\n\t\tlet currentSubcaucusID = 0\n\t\tlet subcaucuses = new TSMap<number, Subcaucus>()\n\n\t\tObject.keys(jsonSubcaucuses).forEach((key: any) => {\n\t\t\tkey = Number(key)\n\t\t\tconst subcaucus = this.jsonToSubcaucus(jsonSubcaucuses[key], key)\n\t\t\tif (subcaucus) {\n\t\t\t\tcurrentSubcaucusID = Math.max(currentSubcaucusID, key)\n\t\t\t\tsubcaucuses.set(key, subcaucus)\n\t\t\t}\n\t\t})\n\n\t\tcurrentSubcaucusID++ // represents the next ID we should hand out\n\t\t_u.debug(\"currentSubcaucusID\", currentSubcaucusID)\n\n\t\treturn {\n\t\t\tcreated: created,\n\t\t\trevised: revised,\n\t\t\trevision: revision,\n\t\t\tname: name,\n\t\t\tallowed: allowed,\n\t\t\tseed: seed,\n\t\t\tcurrentSubcaucusID: currentSubcaucusID,\n\t\t\tsubcaucuses: subcaucuses\n\t\t}\n\t}\n\n\t/**\n\t * Given the JSON object version of a subcacucus and its key, this function\n\t * creates the subcaucus object version.\n\t */\n\tjsonToSubcaucus = (jsonSubcaucus: any, key: number): Subcaucus | undefined => {\n\n\t\tif (typeof jsonSubcaucus != \"object\") {\n\t\t\t_u.debug(new Error(`Non-object subcaucus ${key}`), jsonSubcaucus)\n\t\t\treturn undefined\n\t\t}\n\n\t\treturn new Subcaucus(key, {\n\t\t\tname: jsonSubcaucus[\"name\"],\n\t\t\tcount: jsonSubcaucus[\"count\"]\n\t\t})\n\t}\n\n\t/**\n\t * Retrieve a snapshot (by default, the current meeting's current state),\n\t * from storage.\n\t * \n\t * NOTE: A side effect of this function is that the `currentMeetingKey`\n\t * of the Storage instance is reset when retrieval is successful.\n\t */\n\tgetSnapshot = (meetingKey = '', timestamp?: string): MeetingSnapshot | undefined => {\n\t\tconst { currentMeetingKey, meetings } = this\n\n\t\tif (meetingKey === '') {\n\t\t\tif (!currentMeetingKey) {\n\t\t\t\t_u.alertUser(new Error(\"No current meeting data\"))\n\t\t\t\treturn undefined\n\t\t\t}\n\t\t\tmeetingKey = currentMeetingKey\n\t\t}\n\n\t\tconst meeting = meetings[meetingKey]\n\n\t\tif (meeting === undefined) {\n\t\t\t_u.alertUser(new Error(`No data for meeting ${meetingKey}`))\n\t\t\treturn undefined\n\t\t}\n\n\t\tif (timestamp === undefined) {\n\t\t\tthis.currentMeetingKey = meetingKey\n\t\t\treturn meeting.current\n\t\t}\n\n\t\tconst snapshot = meeting.snapshots[timestamp]\n\n\t\tif (snapshot === undefined) {\n\t\t\t_u.alertUser(new Error(`No data for meeting ${currentMeetingKey} snapshot ${timestamp}`))\n\t\t\treturn undefined\n\t\t}\n\n\t\tthis.currentMeetingKey = meetingKey\n\t\treturn snapshot\n\t}\n\n\n}","import * as React from 'react'\n// see https://www.primefaces.org/primereact\nimport { Button } from 'primereact/button'\nimport { InputText } from 'primereact/inputtext'\nimport { InputTextarea } from 'primereact/inputtextarea'\n// local to this app\nimport * as _u from './Utilities'\nimport { Subcaucus } from './Subcaucus'\n\nexport type SubcaucusRowAction = 'sync' | 'enter' | State\n\ninterface Props {\n\tid: number\n\texchange: ((subcaucusID: number, action: SubcaucusRowAction) => Subcaucus | undefined)\n}\n\ninterface State {\n\tname: string\n\tcount: number\n\tdelegates: number\n}\n\nexport class SubcaucusRow extends React.Component<Props, State> {\n\n\tconstructor(props: Props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tname: '',\n\t\t\tcount: 0,\n\t\t\tdelegates: 0,\n\t\t}\n\t\tconst subcaucus = this.props.exchange(this.props.id, 'sync')\n\t\tif (subcaucus) {\n\t\t\tthis.state = {\n\t\t\t\tname: subcaucus.name,\n\t\t\t\tcount: subcaucus.count,\n\t\t\t\tdelegates: subcaucus.delegates\n\t\t\t}\n\t\t}\n\t}\n\n\t// static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n\t// \tlet newState = {}\n\t// \tconst subcaucus = nextProps.exchange(nextProps.id, 'sync')\n\t// \tif (subcaucus) {\n\t// \t\tnewState = {\n\t// \t\t\tname: subcaucus.name,\n\t// \t\t\tcount: subcaucus.count,\n\t// \t\t\tdelegates: subcaucus.delegates\n\t// \t\t}\n\t// \t}\n\t// \treturn newState\n\t// }\n\n\thandleName = () => (event: React.FormEvent<HTMLTextAreaElement>) => {\n\t\tvar value = event.currentTarget.value\n\t\tthis.setState({ name: value })\n\t\tthis.props.exchange(this.props.id, { ...this.state, name: value })\n\t}\n\n\thandleCount = () => (event: React.FormEvent<HTMLInputElement>) => {\n\t\tvar num = Number(event.currentTarget.value)\n\t\tif (num < 0) {\n\t\t\tnum = 0\n\t\t}\n\t\tthis.setState({ count: num })\n\t}\n\n\tnotify = () => (event: React.FormEvent<HTMLInputElement>) => {\n\t\tthis.props.exchange(this.props.id, { ...this.state })\n\t}\n\n\thandleKey = () => (event: React.KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n\t\tif (event.key === 'Enter' || event.key === 'Tab') {\n\t\t\tthis.props.exchange(this.props.id, 'enter')\n\t\t}\n\t}\n\n\tfocusOnWholeText = () => (event: React.FormEvent<HTMLInputElement>) => {\n\t\t// event properties must be copied to use async\n\t\tconst target = event.currentTarget\n\t\t// do this async to try to make Safari behave\n\t\tsetTimeout(() => target.setSelectionRange(0, 9999), 0)\n\t}\n\n\tidPlus = (suffix: string): string | undefined => {\n\t\treturn `subcaucus-${this.props.id}-${suffix}`\n\t}\n\n\trender() {\n\t\t_u.debug(\"render row\", this.props.id, this.state)\n\n\t\tconst { name, count, delegates } = this.state\n\n\t\treturn (\n\t\t\t<div id={this.idPlus(\"row\")}\n\t\t\t\tclassName={`subcaucus-row ${delegates > 0 ? \"has-delegates\" : (count > 0 ? \"no-delegates\" : \"\")}`}\n\t\t\t>\n\t\t\t\t{_u.isDebugging ? <div className=\"subcaucus-id\">{this.props.id}</div> : ''}\n\t\t\t\t<InputTextarea id={this.idPlus(\"row-name\")}\n\t\t\t\t\tclassName=\"subcaucus-field subcaucus-name\"\n\t\t\t\t\tautoComplete=\"off\"\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tvalue={name}\n\t\t\t\t\trows={1}\n\t\t\t\t\tcols={1}\n\t\t\t\t\t// PrimeReact has a bug with the InputTextarea placeholder\n\t\t\t\t\t// for now, it will not update this placeholder\n\t\t\t\t\t// see: https://github.com/primefaces/primereact/issues/747\n\t\t\t\t\tplaceholder={`Subcaucus ${this.props.id}`}\n\t\t\t\t\t// placeholder={`Subcaucus name`}\n\t\t\t\t\tonChange={this.handleName()}\n\t\t\t\t\tonKeyUp={this.handleKey()}\n\t\t\t\t/>\n\t\t\t\t<InputText id={this.idPlus(\"row-count\")}\n\t\t\t\t\tclassName=\"subcaucus-field subcaucus-count\"\n\t\t\t\t\tautoComplete=\"off\"\n\t\t\t\t\tkeyfilter=\"pint\"\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tpattern=\"\\d*\"\n\t\t\t\t\tvalue={count ? count : ''}\n\t\t\t\t\tplaceholder={`—`}\n\t\t\t\t\tonChange={this.handleCount()}\n\t\t\t\t\tonBlur={this.notify()}\n\t\t\t\t\t// forcing the selction of the whole text seems to lead to problems\n\t\t\t\t\t// see https://grand.clst.org:3000/tenseg/subcalc-pr/issues/3\n\t\t\t\t\t// onFocus={this.focusOnWholeText()}\n\t\t\t\t\tonKeyUp={this.handleKey()}\n\t\t\t\t/>\n\t\t\t\t<Button id={this.idPlus(\"row-delegates\")}\n\t\t\t\t\tclassName={`subcaucus-delegates-button ${delegates > 0 ? \"p-button-success\" : \"p-button-secondary\"}`}\n\t\t\t\t\tlabel={delegates ? `${delegates}` : undefined}\n\t\t\t\t\ticon={delegates ? undefined : (count ? 'pi pi-ban' : 'pi')}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t)\n\t}\n}\n","import * as React from 'react'\n// see https://www.primefaces.org/primereact\nimport { Button } from 'primereact/button'\nimport { Card } from 'primereact/card'\nimport { InputText } from 'primereact/inputtext'\n// local to this app\nimport * as _u from './Utilities'\n\ntype KindOfValue = 'text' | 'positive integer'\n\ninterface Props {\n    id?: string\n    title: string\n    description?: string\n    image?: string\n    alt?: string\n    extraButtons?: JSX.Element\n    footer?: JSX.Element\n    type?: KindOfValue\n    value?: string\n    defaultValue?: string\n    allowEmpty?: boolean\n    onSave?: ((value?: string) => void)\n}\ninterface State {\n    value: string\n}\n\nexport class ValueCard extends React.Component<Props, State> {\n\n    isPositiveInteger = false\n\n    constructor(props: Props) {\n        super(props)\n        this.isPositiveInteger = this.props.type === 'positive integer'\n        let initialValue = _u.unwrapString(this.props.value)\n        if (!this.props.allowEmpty && this.isEmpty(initialValue)) {\n            initialValue = _u.unwrapString(this.props.defaultValue)\n        }\n        this.state = {\n            value: initialValue,\n        }\n    }\n\n    originalValue = (): string => {\n        return _u.unwrapString(this.props.value)\n    }\n\n    defaultValue = (): string => {\n        return _u.unwrapString(this.props.defaultValue)\n    }\n\n    handleChange = () => (event: React.FormEvent<HTMLInputElement>) => {\n        _u.debug(\"change\", event.currentTarget.value)\n        if (this.isPositiveInteger) {\n            var num = Number(event.currentTarget.value)\n            if (num < 0) {\n                num = 0\n            }\n            this.setState({ value: String(num) })\n        } else {\n            this.setState({ value: event.currentTarget.value })\n        }\n    }\n\n    handleKey = () => (event: React.KeyboardEvent<HTMLInputElement>) => {\n        if (event.key === 'Enter') {\n            if (this.props.onSave) {\n                this.props.onSave(this.state.value.trim())\n            }\n        }\n    }\n\n    focusOnWholeText = () => (event: React.FormEvent<HTMLInputElement>) => {\n        // event properties must be copied to use async\n        const target = event.currentTarget\n        // do this async to try to make Safari behave\n        setTimeout(() => target.setSelectionRange(0, 9999), 0)\n    }\n\n    isEmpty = (value?: string): boolean => {\n        var empty = (value === '') || (value === undefined)\n        if (this.isPositiveInteger) {\n            empty = (empty || value === '0')\n        }\n        return empty\n    }\n\n    save = (value?: string) => (event: React.MouseEvent<HTMLButtonElement>) => {\n        if (this.props.onSave) {\n            if (value === undefined) {\n                this.props.onSave()\n            } else if (this.isEmpty(value) && !this.props.allowEmpty) {\n                if (!this.isEmpty(this.props.defaultValue)) {\n                    this.props.onSave(this.props.defaultValue)\n                }\n            } else {\n                this.props.onSave(value.trim())\n            }\n        }\n    }\n\n    idPlus = (suffix: string): string | undefined => {\n        return this.props.id ? `${this.props.id}-${suffix}` : undefined\n    }\n\n    render() {\n\n        const { value } = this.state\n        const isPositiveInteger = this.isPositiveInteger\n\n        let cardFooter = <></>\n\n        if (this.props.footer == undefined) {\n            const illegallyEmpty = (this.isEmpty(value) && this.isEmpty(this.defaultValue()) && this.props.allowEmpty === false)\n            const originalIllegallyEmpty = (this.isEmpty(this.originalValue()) && this.props.allowEmpty === false)\n\n            // don't show a save button at all if there is no save function\n            // and if there is no value property, then call the save button \"close\" instead\n            const saveButton = (this.props.onSave\n                ? ((this.props.value != undefined)\n                    ? <Button id={this.idPlus(\"save-button\")}\n                        label=\"Save\"\n                        icon=\"pi pi-check\"\n                        disabled={illegallyEmpty}\n                        onClick={this.save(_u.unwrapString(value, this.defaultValue()))}\n                    />\n                    : <Button id={this.idPlus(\"close-button\")}\n                        label=\"Close\"\n                        icon=\"pi pi-times\"\n                        onClick={this.save()}\n                    />\n                )\n                : <></>\n            )\n\n            const cancelButton = originalIllegallyEmpty || this.props.value === undefined\n                ? ''\n                : <Button id={this.idPlus(\"cancel-button\")}\n                    label=\"Cancel\"\n                    icon=\"pi pi-times\"\n                    className=\"p-button-secondary\"\n                    onClick={this.save()}\n                />\n\n            cardFooter = <>{saveButton}{this.props.extraButtons}{cancelButton}</>\n        } else {\n            cardFooter = this.props.footer\n        }\n\n        return (\n            <div className=\"valuecard-wrapper\">\n                <div className=\"background-blocker\">\n                </div>\n                <Card id={this.idPlus(\"valuecard\")}\n                    className={`valuecard ${this.idPlus(\"valuecard\")}`}\n                    title={this.props.title}\n                    header={this.props.image\n                        ? <div id={this.idPlus(\"picture-container\")}\n                            className=\"picture-container\"\n                        >\n                            <img\n                                alt={`${this.props.alt}`}\n                                src={`${this.props.image}`}\n                            />\n                            {this.props.onSave\n                                ? <></>\n                                : <Button\n                                    id={this.idPlus(\"picture-close-button\")}\n                                    icon=\"pi pi-times\"\n                                    onClick={this.save()}\n                                />\n                            }\n                        </div>\n                        : undefined\n                    }\n                    footer={cardFooter}\n                >\n                    {this.props.children\n                        ? <div id={this.idPlus(\"valuecard-children\")} className=\"valuecard-children\">\n                            {this.props.children}\n                        </div>\n                        : ''}\n                    {this.props.description\n                        ? <div id={this.idPlus(\"valuecard-description\")} className=\"valuecard-description\">\n                            <p>{this.props.description}</p>\n                        </div>\n                        : ''}\n                    {this.props.value != undefined\n                        ? <InputText id={this.idPlus(\"card-field\")}\n                            className={isPositiveInteger ? \"number\" : \"text\"}\n                            autoComplete=\"off\"\n                            keyfilter={isPositiveInteger ? \"pint\" : \"\"}\n                            type=\"text\"\n                            pattern={isPositiveInteger ? \"\\\\d*\" : undefined}\n                            value={isPositiveInteger ? (value === '0' ? '' : value) : value} // show 0 as blank for positive integers\n                            placeholder={this.props.defaultValue}\n                            onChange={this.handleChange()}\n                            // onFocus={this.isPositiveInt ? this.focusOnWholeText() : undefined}\n                            onKeyUp={this.handleKey()}\n                            autoFocus\n                        />\n                        : ''\n                    }\n                </Card>\n            </div>\n        )\n    }\n}\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { App } from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root') as HTMLElement\n);\nregisterServiceWorker();\n"],"sourceRoot":""}